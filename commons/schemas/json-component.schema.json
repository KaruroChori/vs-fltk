{
    "additionalProperties": false,
    "type": "object",
    "properties": {
        "$schema": {
            "type": "string"
        },
        "ns": {
            "description": "Namespace for this component, for example `fl` in case of fltk wrappers.",
            "type": "string"
        },
        "name": {
            "type": "string"
        },
        "exposed": {
            "default": true,
            "description": "If true, this widget will be usable from XML and shown in the documentation, otherwise it is not exported.",
            "type": "boolean"
        },
        "description": {
            "description": "While optional, this field is extremely important for exposed widgets",
            "type": "string"
        },
        "use_main_header": {
            "default": null,
            "description": "If set, no class definition will be generated. It will instread load one already present. Used to track and document widgets which are not fully autogenerated.",
            "anyOf": [
                {
                    "type": "null"
                },
                {
                    "type": "string"
                }
            ]
        },
        "headers": {
            "description": "List of header files used by the widget in its public header file.",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "private_headers": {
            "description": "List of header files used by the widget in its generated cpp file.",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "type": {
            "description": "Type of frame an instance of this widget class will default top.",
            "anyOf": [
                {
                    "const": "leaf",
                    "type": "string"
                },
                {
                    "const": "node",
                    "type": "string"
                },
                {
                    "const": "container",
                    "type": "string"
                },
                {
                    "const": "slot",
                    "type": "string"
                },
                {
                    "const": "slot-contaiener",
                    "type": "string"
                }
            ]
        },
        "codegen": {
            "additionalProperties": false,
            "type": "object",
            "properties": {
                "extends": {
                    "default": null,
                    "description": "If set, a class to inherit from, usually related to the fltk widget.",
                    "anyOf": [
                        {
                            "type": "null"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "set_tail": {
                    "description": "If specified, what to do if a getter is not matched.",
                    "anyOf": [
                        {
                            "type": "null"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "get_tail": {
                    "description": "If specified, what to do if a setter is not matched.",
                    "anyOf": [
                        {
                            "type": "null"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            },
            "required": [
                "extends"
            ]
        },
        "extends": {
            "default": null,
            "description": "If set, a vs widget to inherit from (not a c++ class name)",
            "anyOf": [
                {
                    "type": "null"
                },
                {
                    "type": "string"
                }
            ]
        },
        "skip_fields": {
            "default": [],
            "description": "Properties to be matched when set, but ignored.",
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "fields": {
            "type": "object",
            "patternProperties": {
                "^(.*)$": {
                    "additionalProperties": false,
                    "type": "object",
                    "properties": {
                        "type": {
                            "description": "type",
                            "default": "string",
                            "anyOf": [
                                {
                                    "const": "flag",
                                    "type": "string"
                                },
                                {
                                    "const": "enum",
                                    "type": "string"
                                },
                                {
                                    "const": "raw",
                                    "type": "string"
                                },
                                {
                                    "const": "path",
                                    "type": "string"
                                },
                                {
                                    "const": "string",
                                    "type": "string"
                                },
                                {
                                    "const": "color",
                                    "type": "string"
                                },
                                {
                                    "const": "scalar-1",
                                    "type": "string"
                                },
                                {
                                    "const": "scalar-2",
                                    "type": "string"
                                },
                                {
                                    "const": "scalar-4",
                                    "type": "string"
                                }
                            ]
                        },
                        "subtype": {
                            "type": "string"
                        },
                        "parse": {
                            "description": "From string to object. Default based on `type` (and `subtype`)",
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "setter": {
                            "description": "Operations on setting. If undefined, this field is only available as a computed value. If null use default",
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "getter": {
                            "description": "Implementation on how to extract value from object. If undefined the field is not observable. If null use default",
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "description": {
                            "type": "string"
                        },
                        "semantic": {
                            "default": false,
                            "description": "If true, this field has a strong semantic meaning. Used for semantic serialization of a document.",
                            "type": "boolean"
                        },
                        "alias": {
                            "description": "alias names",
                            "default": [],
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "required": [
                        "type"
                    ]
                }
            }
        }
    },
    "required": [
        "use_main_header",
        "type",
        "codegen",
        "extends",
        "fields"
    ]
}