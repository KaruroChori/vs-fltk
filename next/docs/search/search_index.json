{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Important</p> <p>This project is very much in its infancy. At the moment final users are not expected to install or run <code>vs</code>, so this document has not been filled in yet.</p> <p>To be written. For now check here to get an introduction.</p>"},{"location":"LICENCE/","title":"Creative Commons Attribution-ShareAlike 4.0 International","text":"<p>Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p> <p>Using Creative Commons Public Licenses</p> <p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <ul> <li> <p>Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors.</p> </li> <li> <p>Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public.</p> </li> </ul>"},{"location":"LICENCE/#creative-commons-attribution-sharealike-40-international-public-license","title":"Creative Commons Attribution-ShareAlike 4.0 International Public License","text":"<p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\u201cPublic License\u201d). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p>"},{"location":"LICENCE/#section-1-definitions","title":"Section 1 \u2013 Definitions.","text":"<p>a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.</p> <p>b. Adapter\u2019s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.</p> <p>c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.</p> <p>d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.</p> <p>e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.</p> <p>f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.</p> <p>g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.</p> <p>h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.</p> <p>i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.</p> <p>j. Licensor means the individual(s) or entity(ies) granting rights under this Public License.</p> <p>k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.</p> <p>l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.</p> <p>m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.</p>"},{"location":"LICENCE/#section-2-scope","title":"Section 2 \u2013 Scope.","text":"<p>a. License grant.</p> <ol> <li> <p>Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:</p> <p>A. reproduce and Share the Licensed Material, in whole or in part; and</p> <p>B. produce, reproduce, and Share Adapted Material.</p> </li> <li> <p>Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.</p> </li> <li> <p>Term. The term of this Public License is specified in Section 6(a).</p> </li> <li> <p>Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.</p> </li> <li> <p>Downstream recipients.</p> <p>A. Offer from the Licensor \u2013 Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.</p> <p>B. Additional offer from the Licensor \u2013 Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply.</p> <p>C. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.</p> </li> <li> <p>No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).</p> </li> </ol> <p>b. Other rights.</p> <ol> <li> <p>Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.</p> </li> <li> <p>Patent and trademark rights are not licensed under this Public License.</p> </li> <li> <p>To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.</p> </li> </ol>"},{"location":"LICENCE/#section-3-license-conditions","title":"Section 3 \u2013 License Conditions.","text":"<p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <ol> <li> <p>If You Share the Licensed Material (including in modified form), You must:</p> <p>A. retain the following if it is supplied by the Licensor with the Licensed Material:</p> <p>i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);</p> <p>ii. a copyright notice;</p> <p>iii. a notice that refers to this Public License;</p> <p>iv. a notice that refers to the disclaimer of warranties;</p> <p>v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;</p> <p>B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and</p> <p>C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.</p> </li> <li> <p>You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.</p> </li> <li> <p>If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.</p> </li> </ol> <p>b. ShareAlike.</p> <p>In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.</p> <ol> <li> <p>The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.</p> </li> <li> <p>You must include the text of, or the URI or hyperlink to, the Adapter\u2019s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.</p> </li> <li> <p>You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter\u2019s License You apply.</p> </li> </ol>"},{"location":"LICENCE/#section-4-sui-generis-database-rights","title":"Section 4 \u2013 Sui Generis Database Rights.","text":"<p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;</p> <p>b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p>"},{"location":"LICENCE/#section-5-disclaimer-of-warranties-and-limitation-of-liability","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability.","text":"<p>a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.</p> <p>b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.</p> <p>c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.</p>"},{"location":"LICENCE/#section-6-term-and-termination","title":"Section 6 \u2013 Term and Termination.","text":"<p>a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:</p> <ol> <li> <p>automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or</p> </li> <li> <p>upon express reinstatement by the Licensor.</p> </li> </ol> <p>For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.</p> <p>c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.</p>"},{"location":"LICENCE/#section-7-other-terms-and-conditions","title":"Section 7 \u2013 Other Terms and Conditions.","text":"<p>a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.</p>"},{"location":"LICENCE/#section-8-interpretation","title":"Section 8 \u2013 Interpretation.","text":"<p>a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.</p> <p>c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#general-questions","title":"General questions","text":"<p>While <code>vs</code> shares many of its technologies and ideas with modern SFC frameworks, its design is significantly more opinionated and less free. This document addresses several of the perceived or actual shortcomings, and provides some of the implied rationale.</p>"},{"location":"faq/#what-is-an-sfc-single-file-component","title":"What is an SFC (Single File Component)?","text":"<p>SFCs are special files encapsulating templates, style and logic of a self-contained UI unit. They first appeared as part of long defunct proposal for native <code>html</code> components &amp; XHTML XSLT components. They are now implemented in modern frameworks like svelte or vue.</p>"},{"location":"faq/#can-we-have-something-like-canvas","title":"Can we have something like <code>&lt;canvas&gt;</code>?","text":"<p>No. You are free to add or use a custom native component if you really want. If you don\u2019t really need a full canvas, there is support still for arbitrary SVG files as part of <code>fltk</code>. But canvas-like components are not and will never be part of the core components shipped with <code>vs</code>. Because of that, such capabilities are not meant to be universally accessible by <code>vs</code> users. The reason is that canvas-like components can be abused to replace UI primitives, breaking the semantics on which accessibility tools and robots are relying upon. Furthermore, to be useful we should also allow arbitrary execution of code in embedded scripts that is generally discouraged even when enabled.</p>"},{"location":"faq/#can-we-have-a-webgpu-opengl-vulkan-context","title":"Can we have a webgpu, opengl, vulkan context?","text":"<p>No, same as for <code>&lt;canvas&gt;</code>. But feel free to wrap a <code>vs</code> UI around a custom vulkan viewport if that fits you application. Be mindful you would need some way to distribute your custom software as it will not be working out of the box for most users.</p>"},{"location":"faq/#why-c-in-embedded-scrips-it-is-unsafe","title":"Why C in embedded scrips? It is unsafe!","text":"<p>Yes, you are basically giving all keys to the XML provider to run arbitrary code on your machine. Even if <code>vs</code> is not exposing direct access to the fs or network to embedded scripts, arbitrary C code, once compiled, will be able to do arbitrary things. It is understandable that from the point of view of \u201cweb development\u201d this idea is absurd. But <code>vs</code> is not about web development, its main objective is to provide lightweight native UIs. You can load XML components and resources from the internet &amp; gemini, but you should only accept native components and native scripts from trusted sources, quite possibly some you have control over. Still, that would be not less safe than just compiling and running some random code from github, but for some reason one is more socially accepted.</p> <p>By comparison, QuickJS, Lua and especially WAMR do offer a much more sandboxed experience. In the future it will be possible to set up robust policies based on domains to determine which type of scripts should be allowed if any. For now, there are some coarse environment variables that can be set to fully disable certain features.</p>"},{"location":"faq/#can-it-be-used-for-fully-standalone-applications","title":"Can it be used for fully standalone applications?","text":"<p>Ideally yes. Broadly speaking there are three \u201cmodes\u201d in which <code>vs</code> can operate:</p> <ul> <li>As a fully standalone application. The main issue being the limited selection of functions which are made available in embedded scripts, and their sandboxed nature which only allows specific types of symbols to be exposed and shared.   Keep in mind that even while working in C, as unsafe as it is, you are not given direct full access to the standard library; this is deliberate design decision to limit the scope of custom code in scripts.</li> <li>As the front-end of a dynamically linked library which embeds all complex functionalities and provides hooks to the UI in <code>vs</code>. Events triggered from UI will trigger calls to features exposed in your library. Useful for event driven applications, like providing a simple visual front-end to your CLI.</li> <li>As the front-end of a separate process, sharing information via UNIX Domain Sockets. Useful for multi-client applications, or those in which the bulk of the operations are not event driven. It also avoids the need to compile your codebase into a dynamic library, allowing it to interoperate with virtually any runtime.</li> </ul> <p>For now, most efforts are focused in making the first two options viable. The third one is planned for later.</p>"},{"location":"faq/#how-to-map-sfc-concepts-to-vs","title":"How to map SFC concepts to <code>vs</code>?","text":"Concept Web VS Components XML or HTML template XML Static templating XSLT or JSX vs-templ (XSLT-like) Dynamic templating alpine, htmx, jquery, \u2026 Restricted, via standard components Style XSLT and/or CSS and transpilation Mixins Scripting JS, WASM and transpilation C/JS/Lua/WASM Data handling Limited via forms, JSON/XML via JS Native <code>data</code> component <p>All flow control features and templating like <code>if</code> or <code>for-each</code> blocks which are typical in frameworks like vue are performed either:</p> <ul> <li>As a build step for components if they can be evaluated statically.</li> <li>Via custom elements and are not part of core <code>vs</code> and provide a controlled dynamic behaviour.</li> </ul> <p>This comparison is just meant to provide some basic intuition of how things match. Still, the design patterns between <code>vs</code> and more traditional SFC frameworks are quite different.</p>"},{"location":"faq/#but-i-want-a-css-like-experience","title":"But I want a CSS-like experience!","text":"<p>In theory there is nothing preventing <code>vs</code> to integrate some <code>style</code> equivalent with mixins restructured as CSS-like classes. If you want to do that feel free to send in a PR, I am more than willing to see it integrated.</p>"},{"location":"faq/#theming-and-colors-schemes-what-can-i-do","title":"Theming and colors schemes. What can I do?","text":"<p>FLTK, the toolkit on which <code>vs</code> is based, has limited capabilities in this respect. Out of the box, it makes opinionated choices on what and how to render boxes based on their class. Of those only few kinds are embedded in the engine. Hence, both indexed colors and box types have their semantics enforced by FLTK and are globally shared within each process. Given these constraints, one can specify any color or any rendering function for the different frame types (even SVG images). Yet it is not possible to introduce new classes out of thin air.</p> <p>It is possible to define custom draw functions and adopt mixins to override the default style, but doing it more than occasionally would result in some quite messy code. If you need fine and frequent control over your UI, <code>vs</code> is likely not the right framework for you.</p>"},{"location":"faq/#dont-we-have-fluid-already-for-fltk","title":"Don\u2019t we have fluid already for FLTK?","text":"<p>fluid is an excellent tool, but in my opinion it has few problems:</p> <ul> <li>The visual editor is nice, but it does not really allow defining custom widgets as standalone and reusable components. At least, not easily enough.</li> <li>It integrates C/C++ code only to \u201cfill in\u201d the missing parts of the application, in a way which I don\u2019t find particularly ergonomic.</li> <li>It does nothing to provide runtime capabilities for the UI beyond what FLTK offers, which is a bit too basic.</li> <li>It is restricted to C/C++, unless you linked your own dynamic library written with a language of choice.</li> </ul>"},{"location":"faq/#is-there-any-plan-to-support-alternative-backends-to-fltk","title":"Is there any plan to support alternative backends to fltk?","text":"<p>Short answer, no. However, most of the infrastructure and code of this repo has only minimal reliance on fltk. It is possible for most code in this repo to be preserved if a new backend were to be selected. One scenario which might be interesting to consider is lgvl for example.</p>"},{"location":"faq/#likely-pitfalls","title":"Likely pitfalls","text":"<p>Unlike other runtimes adopting DOM-like structures, <code>vs</code> is not using XML nor its parsed version in memory as the actual UI representation. The XML source is statically compiled into a UI tree, a wrapper/superset of the tree structure that FLTK internally implements, enabling all the higher level features of <code>vs</code>. This means that at runtime the source XML will we de-allocated from memory right after the UI tree is built, and it cannot be trivially referenced again. We also plan in a not-so-far-distant future to use some source XML to generate the equivalent C++ code, and use that to reach a fully native level of performance and a minimal memory consumption.</p>"},{"location":"faq/#i-want-my-todo-list","title":"I want my todo list!","text":"<p>How do I create a list which can spawn multiple copies of some component based on runtime data in XML then?</p> <p>You don\u2019t. Components based on XML have several limitations on which mutations are allowed during runtime. A basic principle of this framework is to keep arbitrary code and logic as far away as possible from the final user, and what one sees in code should perfectly match what one visually gets. Making the tree mostly immutable and restricting which operations are allowed in the embedded scripts vibes with this vision of simplicity. In addition to XML components, native ones are also allowed in <code>vs</code>. Native components are written in C++ (or any language which can work with our C bindings) &amp; built dynamically against the full library. Native components cover the same features provided by the XML builder and much more. There is (will be) a library of base native components designed to cover all common scenarios where dynamic data is expected to drive UI changes, but if yours does not fit you will have to write a custom one and ensure its semantics is explicitly encoded as meta-information.</p> <p>Realistically, once <code>vs</code> gets stable enough, the standard library should be plenty for virtually any developer. This way, any dynamic behaviour requiring arbitrary code execution is kept outside the XML tree, in a native codebase which is not controlled by any single developer (unless the final user decides to enable certain native components distributed by third parties). This fits with the design philosophy that there should only one good way to implement a certain feature on the UI front-end.</p>"},{"location":"faq/#what-about-templates","title":"What about templates?","text":"<p>Ok, but being forced to manually write the code for 5x5 buttons on a widget is not really clever.</p> <p>This is what build steps are for! You can generate your XML in react or xslt for example. We are also implementing our own xml preprocessor to statically generate components within the <code>vs</code> viewer itself. Right now <code>vs.templ</code> is working in <code>vs</code>, but not every planned feature according to specs has been implemented yet.</p>"},{"location":"faq/#how-to-handle-state-state-changes","title":"How to handle state &amp; state changes?","text":"<p>If the XML is lost, how to I know &amp; query the state of widgets?</p> <p>Not via a DOM structure. In theory FLTK provides an interface to get the current value of its properties from its own widgets, however we decided not to expose it fully. Still, <code>vs</code> widgets can provide some selected computed properties. It should be considered that props in the XML and keys used by FLTK are not a 1-to-1 match, even though we try to keep them as close as possible when reasonable; some complex processing on the input expressions can take place both at compile time and at runtime. None of that is directly reflected in the state of a FLTK widget.</p> <p>Aside from these considerations, we can still keep state, just not explicitly within <code>vs</code> widgets. There are four main approaches, each suited best for a different class of cases.</p>"},{"location":"faq/#self-mixins","title":"Self mixins","text":"<p>Each <code>vs</code> widget with a frame can specify a self mixin, which internally is just a persisted map of props. Unlike props directly defined on the element itself, at runtime self mixins are persisted throughout the session.</p> <p>Please, be mindful that self mixins will force widgets to have their own frame even if left nameless, significantly raising their memory footprint. Furthermore, mixins operate on objects serialized to strings, making the process of using them more computationally expensive. Still, this also makes them more flexible, as mixins represent expressions to compute and not immediate values.</p> <p>I would like to close with an example showing a typical pitfall in handling state via mixins:</p> <pre><code>&lt;component-a prop-1=\"value-1\"&gt;\n    &lt;mixin prop-2=\"value-2\"&gt;\n&lt;/compoent-a&gt;\n</code></pre> <p><code>component-a</code> will be built with its own <code>prop-1</code> and <code>prop-2</code> inherited from the self mixin. However, the content of <code>prop-1</code> is applied &amp; lost after compilation, while <code>prop-2</code> can be queried at runtime. Mixins can be mutated at runtime as well. but an explicit update request must be triggered onto a component for it to be updated &amp; reflect such changes. nope, we set it dirty and recompute all dirty things after some time no more have been adeded</p>"},{"location":"faq/#data-sources","title":"Data sources","text":"<p>Data sources can provide and store values for props. Persistent storage and Secrets are contextual data sources which are always implicitly made available and can be used with the same interface.</p>"},{"location":"faq/#within-scripts","title":"Within scripts","text":"<p>One should not be surprised that this approach is the least desirable. If you can do differently, please do. One can either have static variables in single users scripts, maps in modules, or have them linked from the back-end.</p> <p>In any case, the mechanism to access these variables is via custom <code>setters</code> and <code>getters</code>. They will effectively appear as props and computed values of the widget they have been defined for and similarly accessed.</p>"},{"location":"faq/#what-is-mutable-in-a-runtime-instance","title":"What is mutable in a runtime instance?","text":"<ul> <li>Viewports can be fully redrawn and re-sourced.</li> <li>Props of ui widgets can be freely changed. Exclusions apply to <code>name</code>, <code>frame.*</code> and few more which are reserved for internal use during the <code>ui-tree</code> construction.</li> <li>Mixins can be added, removed or changed. Subtrees can be asked to recompute their style info after these changes. (am I sure I want this?)</li> </ul> <p>What is left out:</p> <ul> <li>You cannot re-render components imported and used or direct <code>use</code> as their slot designation is lost at runtime.</li> <li>Like all the other mutable pros, the <code>mixin</code> property of a widget can be changes and its previous state is not stored. So you cannot just append or remove parts from it, it must be fully overwritten each time.</li> <li>When you want a widget to be refreshed, its inline props cannot be evaluated again, as that is only available while parsing XML. If you want to avoid this pitfall, keep all of its style in external mixins, and just mutate its <code>mixin</code> list to set the desired visual state.</li> </ul>"},{"location":"faq/#technical-details","title":"Technical details","text":""},{"location":"faq/#how-does-the-rendering-work","title":"How does the rendering work?","text":"<p>It is a process in two stages for each component:</p> <ul> <li>The first pass checks for all resources needed and scripts to compile. These sub-tasks are added to a pool and run in parallel. If cached, these results are retrieved. If cache-able, they are stored after computation.</li> <li>Once all resources for a component are resolved, the UI tree is constructed visiting the XML again with a depth-first pass.</li> </ul> <p>At the end of this process the XML is freed. XML files are assumed to be fully loaded in memory during processing. However, it is possible to write a streaming parser with much lower memory footprint, as long as the XML is following the strict schema shipped with this repo (it has a rigid order for some tags). This strategy was not employed as it makes the loading process much slower for multithreaded systems with reasonable amounts of memory, and would only be better for low-end embedded systems where fltk is unlikely to be suitable.</p>"},{"location":"faq/#why-codegen-is-in-typescript-why-bun","title":"Why codegen is in typescript? Why bun?","text":"<p>The main reason is expressiveness. Primitives like <code>map</code>, <code>split</code>, <code>join</code> and string templates are extremely useful in simplifying the process. Trying to implement the same in C++ would have been a bit of a nightmare to be honest, even with modern features like <code>std::format</code>. There are libraries replicating a good chunk of the js standard library in C++, but at that point I would just use javascript.</p> <p>As for \u201cwhy bun?\u201d, the main reason is convenience. It has native support to run typescript without transpilation, and a good library to read/write files which is much more compact compared to most alternatives. I considered using txiki.js (no less because I am somewhat involved with the project), which is much more lightweight and can be easily built without extra dependencies if not shipped already on the developer\u2019s machine. Still, it does not use semantic versioning (so features will break every now and then), and it cannot use typescript natively. Hence, no txiki (for now).</p>"},{"location":"faq/#licensing","title":"Licensing","text":""},{"location":"faq/#can-i-contribute-to-this-project","title":"Can I contribute to this project?","text":"<p>Sure! Please be mindful of few things:</p> <ul> <li>Make sure you understand that this project uses different licenses for different parts.</li> <li>You should be ok with us including your contributions under those same terms.</li> <li>This project is very early, and your contribution might end up in the crossfire of roadmaps changing and goals shifting.</li> <li>If you want to contribute major features, I would strongly recommend to reach out or to publish some form of written proposal.</li> <li>You should also accept that the CC Attribution\u2013NoDerivs 4.0 covering most of the project will be relaxed at some point.</li> <li>You will be credited, at the very least by preserving the git history of the project.</li> <li>You are clearly able to distribute any standalone contribution you made as you wish. It is your code.</li> </ul>"},{"location":"faq/#what-about-those-parts-covered-by-the-no-derivatives-clauses","title":"What about those parts covered by the no-derivatives clauses?","text":"<p>Those clauses are just intended to protect this project in its early life, not to prevent people from contributing. If your plan is not to make your own fork and distribute an alternative version of <code>vs</code>, we are totally fine with that!</p>"},{"location":"faq/#why-this-strange-licence","title":"Why this strange licence?","text":"<p>You are strange! Jokes aside, I really don\u2019t want this project to be taken apart by sharks before it is able to run on its own legs. Or at the very least, I am trying to make it as hard as legally possible.</p> <p><code>vs</code> is extremely opinionated, and with opinions come division. XML or JSON, runtime DOM or not, and of course\u2026 data sources or arbitrary fetches in embedded scripts. My reluctance in adopting a less restrictive licence at this stage is well explained in the gemini\u2019s faq. If I had to explain it more with my own words, let\u2019s think about a cost function describing the utility of frameworks like <code>vs</code>. There are many local minima in which such frameworks could end up stuck during development, be it as a necessary but temporary phase or as the unfortunate outcome of short-sighted design decisions. A good vision is the only thing which allows a project to jump across, or at least get quickly out from the local minima of comfort-food. I am not saying my own is \u201cright\u201d nor immutable, just that I have few high-level objectives for this project that others might not share. Allowing <code>vs</code> to be freely forked at this stage comes with the very real risk of me being thrown in a competition I never asked for, unable to provide more than shallow promises on why my intention &amp; my objectives would be \u201cbetter\u201d. As I don\u2019t plan on making the development of this project a painful exercise in demagogy and convincing, I temporarily opted for a licencing model which prevents that. Once this project is robust enough to survive a hostile fork, I would be very glad to relicense it under permissive terms.</p> <p>That being said, if you feel something in the direction of the project or the technical solutions proposed are not good, please reach out! I really appreciate any structured criticism, and I am grateful of any time others might want to put into that. I am not the kind of person which get stuck in their own positions just because they hold them at some point \ud83d\ude0a.</p>"},{"location":"architecture/caching/","title":"Caching","text":"<p>TBW</p>"},{"location":"architecture/pipelines/","title":"Pipelines","text":"<p>Pipelines is the way different backends for scripting are supported in <code>vs</code>.</p>"},{"location":"architecture/pipelines/#c-native-via-tcc","title":"C (native via TCC)","text":"<p>tinycc compiling for native, running C code.</p>"},{"location":"architecture/pipelines/#js-quickjs","title":"JS (quickjs)","text":"<p>quickjs runtime on native, running JS code.</p>"},{"location":"architecture/pipelines/#lua-lualuajit","title":"Lua (lua/luajit)","text":"<p>lua/luajit runtime on native, running Lua code.</p>"},{"location":"architecture/pipelines/#external-via-rpc-on-uds","title":"External via RPC on UDS","text":"<p>External interface with a different process via unix domain sockets and a remote procedure convention.</p>"},{"location":"architecture/pipelines/#any-libriscv","title":"Any (libriscv)","text":"<p>Several compilers can be distributed as RISCV binaries, so a wide range of languages is possible (in principle)</p>"},{"location":"architecture/pipelines/#any-wamr","title":"Any (WAMR)","text":"<p>Several compilers can be distributed as wasm-wasi binaries, so a wide range of languages is possible (in principle). In practice the current landscape of WASM support and interoperability sucks\u2026 so nothing will happen there I guess.</p>"},{"location":"architecture/storage/","title":"Storage","text":"<p><code>vs</code> is designed to use several types of data storage mechanisms for different entities or applications. None of them is shared across multiple users.</p> <ul> <li><code>memory-storage</code>, mapped in memory. It is session based, meaning that restarting the application will erase it, but its entries can be promoted to other more permanent types of storage. It is used to preserve name resolutions, scripts (not serialized), xml documents (not serialized) and memory buffered resources like script sources or images. The same name can be used to store different variations of the same entity. For example a name resolution the script source and the final script object.</li> <li><code>kv-storage</code>, mapped in the SQLite database. It is used to preserve the state of an application and, more in general, information which is not for deletion over multiple sessions. However, it is possible to specify a deadline for entries to be removed.</li> <li><code>res-storage</code>, mapped in the SQLite database. Similar to the previous type of storage, however this one is specifically designed to preserve certain types of resources after promotion from the memory storage. Things like remote content which has been collected once already. Things stored in this storage can be deleted at any point if the current policies on disk usage are violated.</li> <li><code>secrets</code>, mapped in the SQLite database. It is used to preserve data which is relevant to a certain application, but also how to share it with others.</li> <li>The XML profiles, stored on disk but loaded on memory when running <code>vs</code>.</li> <li><code>logs</code>, mapped in the SQLite database. Rotated and deletable if disk usage policies are violated.</li> <li><code>bookmarks</code>, mapped in the SQLite database. Permanent. They can be both automatically added based on history, or on direct user actions.</li> <li><code>policies</code>, mapped in the SQLite database. An extension of the XML profiles, storing detailed policy information for each application which has exceptions.</li> </ul>"},{"location":"developers/","title":"Index","text":""},{"location":"developers/#resources-for-developers","title":"Resources for developers","text":"<ul> <li>How to build <code>vs</code>, use containers and binary distributions.</li> <li>Information about contributing to <code>vs</code>.</li> <li>Conventions for versioning.</li> <li>How to publish a new release.</li> <li>Full specifications of <code>vs</code>.</li> </ul>"},{"location":"developers/building/","title":"Building","text":"<p>Important</p> <p>It was decided that distribution &amp; building will be split. Distribution is to be handled here, while everything build-related stays. Docker images are excluded, as they are meant for developers of <code>vs</code>, not distribution of the final runtime.</p>"},{"location":"developers/building/#supported-platforms","title":"Supported platforms","text":"<p>At the moment, only Linux is supported for building and running <code>vs</code> as its primary target. It is likely that all major CPU architectures are supported, and several POSIX systems can also be targetted.</p> <p>This is just temporary limitation, as all dependencies being used by this project are highly portable, but my own code and the build system are probably not.</p> Platform Arch Building Running debian-trixie amd64 \u2705 \u2705 debian-trixie arm64 \u2753 \u2753 debian-trixie risc64 \u2753 \u2753 freedektop-24.08 amd64 \u2705* \u2705* macos-13 amd64 \u2753 \u2753 macos-14 arm64 \u2705 \u2753 win64 amd64 \u274c \u2753 <p>In addition to this, the building environment is also distributed via docker images.</p>"},{"location":"developers/building/#distribution","title":"Distribution","text":"<p>There are plans to distribute both stable and nightly releases of vs. Please, be mindful that nightly releases can be extremely broken, and for safety reasons they will only be offered as flatpaks.</p> <p>Distribution formats which are supported:</p> <ul> <li><code>flatpak</code> targetting the latest stable freedesktop environment</li> </ul> <p>Distribution formats which are expected to be supported (at some point):</p> <ul> <li><code>deb</code> for the latest stable and experimental of debian (multiarch)</li> <li><code>aur</code> for arch linux and derivatives</li> <li><code>brew</code> for macos</li> </ul> <p>Installing directly via <code>meson</code> is very much not suggested if you don\u2019t want to break your system.</p>"},{"location":"developers/building/#configuration-flags","title":"Configuration flags","text":"<p>Configuration flags, like for any meson project, are in <code>meson.options</code>. In brief, you can disable most features of the runtime if you so wish. This can be good to meet specific safety targets by removing some available options, or to optimize it on embedded applications where the overhead of some parts might be excessive.</p> <p>Builds distributed from this repository are based on the default options unless explicitly specified.</p>"},{"location":"developers/building/#building-requirements","title":"Building requirements","text":"<p>You will need a proper Linux environment, with a modern C++ toolchain installed. Specifically, I suggest <code>clang-19</code> or higher, as this repo is using modern C23 features like <code>#embed</code> to make everyone\u2019s (my) life a bit easier. Also, this project will make use of features from older standards which have not been integrated in the C++ runtime up until very recently. This might require very modern versions of your toolchains.</p> <p>In addition to that, this repo makes use of:</p> <ul> <li>meson as its main build system (alternatives like muon/samurai should be also usable but untested). Any recent-ish version will do (unless you want <code>zig</code> to simplify cross-compiling; for that, &gt;= 1.60 is needed)</li> <li>bun as the ts/js runtime to support all the code generation tasks and some of the more complex pipelines.    I hate bash, and this is what replaces it for any complex task.</li> <li>swiftc barely used for now, but many of the native components shipped within <code>vs</code> will be written in swift (or so I am planning). Version 6 or higher is needed.</li> </ul>"},{"location":"developers/building/#fltk","title":"FLTK","text":"<p>If your system provides a modern version of <code>fltk&gt;=1.4</code>, that will be used by default. If not present, you are likely needing few more dependencies depending on your distribution. On debian-like systems the followings are needed:</p> <ul> <li>libpng-dev</li> <li>libglu1-mesa-dev</li> <li>libpango1.0-dev</li> </ul> <p>There are also some more or less optional dependencies:</p> <ul> <li>libcurl-dev, unless you are trying to compile a custom version without network support, or http only which are supported.</li> <li>gnuplot if you want to generate plots from testing &amp; benchmarking reports.</li> <li>flatpak-builder if you plan on packing and distributing a flatpak of <code>vs</code> (usually not needed, read more about it later in this document)</li> </ul>"},{"location":"developers/building/#additional-documentation","title":"Additional documentation","text":"<p>To generate the additional documentation for distribution and consumption:</p> <ul> <li>mkdocs and several packages for themes and extensions.</li> <li><code>mkdocs</code></li> <li><code>mkdocs-github-admonitions-plugin</code></li> <li>more to be documented</li> <li>doxygen for documentation generated from the code itself.</li> </ul>"},{"location":"developers/building/#ide-integrations","title":"IDE integrations","text":"<p>There is an ongoing effort to better support <code>vs</code> with a proper lsp. In the same repo there is also a vscode client extension.</p> <p><code>vs</code> is expected to leverage this LSP directly in its embedded editor once integrated.</p>"},{"location":"developers/building/#docker","title":"Docker","text":"<p>A docker image is available that automatically covers all the build dependencies. See docker/README.md for further documentation.</p>"},{"location":"developers/building/#building-process","title":"Building process","text":"<p>Note</p> <p>This project uses meson, so there are no git submodules for the most part. One exception is made for <code>flatpak-builder</code> to be usable, but it is being deprecated. If you plan on using it to generate new flatpak images, please ensure submodules are also cloned with the rest of the repository.</p> <p>Start by installing all the <code>bun</code> dependencies needed:</p> <pre><code>bun install\n</code></pre> <p>Then run the following NPM scripts:</p> <pre><code>bun run codegen                     #Initial codegen from schemas\nbun run meson-setup.release         #Set up the meson build directory.\nbun run meson-build                 #Build everything!\n</code></pre> <p>You might want to use <code>meson-setup.clang-release</code> to use clang-19 if found on your system, and your default compiler or choice might not support some modern functions used in this project.</p> <p>To perform tests and benchmarks:</p> <pre><code>bun run test\nbun run benchmark\n</code></pre> <p>To run the dev demo where features under development are usually being tested:</p> <pre><code>bun run vs.example\n</code></pre>"},{"location":"developers/building/#installation","title":"Installation","text":"<p>Warning</p> <p>Don\u2019t install it via <code>meson install ...</code> without a custom <code>DESTDIR</code> set, as shown by its wrapper in <code>package.json</code> script. Some library names will most surely clash with those already installed on your system, and will be overridden. Or future system updates might break <code>vs</code>. Also consider https://github.com/KaruroChori/vs-fltk/issues/3 and its impact. <code>vs.fltk</code> is using very recent versions which have not been rolled out yet in most distribution. Or even worse, custom forks.</p> <p><code>bun run meson-install</code> is now implemented &amp; tested. By default, it installs everything in <code>./build/dist</code>.</p>"},{"location":"developers/building/#flatpak","title":"Flatpak","text":"<p>Important</p> <p>Flatpak in this repos is being deprecated. It will be fully relocated and removed from here before v0.2.1.</p> <p>Note</p> <p>You need a modern version of <code>flatpak-builder</code> to be installed. Some EOL or LTS will not ship with one. Anything &gt; 1.4 should be ok. Also, make sure your runtime is not using a cmake version in $[3.31.0,3.31.2)$. A regression later fixed prevents building cmake via meson. Tracked here.</p> <p>Flatpak is not really the ideal approach to deliver <code>vs</code> due to the intrinsic cost of having a separate runtime already installed on each system. Also, its sandboxing &amp; permission system might raise some issues (but also help to mitigate the current lack of safety features). Still, it is good to support it at these early stages, since many libraries &amp; build dependencies are bleeding-edge, and other forms of distribution are not as convenient.</p> <pre><code>flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n</code></pre> <p>if you never configured <code>--user</code> on your system. Then</p> <pre><code>bun run codegen           #If not run already\nbun run flatpak-builder\n</code></pre>"},{"location":"developers/code-gen/","title":"Code gen","text":"<p>Code generation is extremely important in this project, to ensure:</p> <ul> <li>Multiple targets can be automatically constructed from the same specifications</li> <li>They will be aligned, simplifying versioning</li> </ul> <p>Code generation tasks are performed by typescript code. They are based on information defined in <code>/schemas</code> and run off scripts in <code>/scripts/codegen</code>. This choice of technologies means that installing the bun js runtime is needed to build the project (and only that).</p>"},{"location":"developers/code-gen/#targets-for-generation","title":"Targets for generation","text":""},{"location":"developers/code-gen/#database","title":"Database","text":""},{"location":"developers/code-gen/#widgets","title":"Widgets","text":""},{"location":"developers/code-gen/#enumerations","title":"Enumerations","text":""},{"location":"developers/contributing/","title":"Contributing","text":""},{"location":"developers/contributing/#structure-of-the-repo","title":"Structure of the repo","text":"<ul> <li>src where most of the source for vs.app and the vs.fltk library are located.</li> <li>include like before for the header files. Directories mostly mirrors what is in <code>src</code>.</li> <li>schemas high level specs, main source of information for documentation and automatic code-gen.</li> <li>commons extra public files part of every vs distribution (some of them are auto-generated).</li> <li>docs &amp; examples: this documentation &amp; and all examples. As part of the build process, they are shipped as part of the commons.</li> <li>bindings bindings for all languages supported in embedded <code>script</code>.</li> <li>test &amp; benchmark: test suite &amp; benchmarks for vs &amp; the vs.fltk library.</li> <li>scripts utility scripts (mostly in TS/JS) to handle code generation, the build process and some workflows.</li> <li>experiments playground where new ideas or semi-standalone prototypes are tested.</li> <li>metadata information for distribution (icons, manifest files etc.).</li> <li>dist most of these files are automatically generated and not tracked, the rest of them are needed to distribute the final website with docs.</li> <li>docker anything related to the docker images used to build <code>vs</code>.</li> </ul>"},{"location":"developers/contributing/#language-format-guidelines","title":"Language &amp; format guidelines","text":""},{"location":"developers/contributing/#variables-of-environment","title":"Variables of environment","text":"<p>They are frequently used for both benchmarks and tests. They can also be useful for the developer while testing new functionality, so they have been all covered in here for reference.</p>"},{"location":"developers/contributing/#logging","title":"Logging","text":""},{"location":"developers/contributing/#debug-logging","title":"Debug logging","text":"<p>vs has some features to simplify debugging, mostly to support automatic tests and benchmarks, but they might be useful in other scenarios as well. <code>vs::globals::debug</code> is responsible for that, and it is exposed in several ways:</p> <ul> <li>within embedded scripts</li> <li>via a special xml <code>debug</code> tag</li> <li>in the <code>vs.fltk</code> C interface as well   While using it you can define a key and value. The current timestamp at nanoseconds resolution is also automatically recorded.   Records are saved to a file with name <code>VS_DEBUG_FILE</code> if set, otherwise no output will be emitted. Older content is destroyed.   The file format is just a simple CSV with horizontal tabs as separator of fields and newlines for rows. The order is key, value &amp; timestamp.</li> </ul> <p><code>vs::globals::debug</code> should not be confused with the ordinary logging functions which are also exposed in similar ways, but which are generally contextual and they mostly output to <code>stdout</code>.</p>"},{"location":"developers/contributing/#testing-benchmarking","title":"Testing &amp; Benchmarking","text":"<ul> <li>Static build tests for <code>vs</code> to ensure it can be compiled on all and for all supported platforms.</li> <li>Static tests/benchmarks on <code>vs.fltk</code> functionalities provided by the library, like path resolution, mixin logic etc.</li> <li>Runtime tests/benchmarks on <code>vs</code>in headless mode with automatic actions, with optional memory profiling.</li> <li>Runtime tests on <code>vs</code> with a headless x11 server to obtain screenshot to highlight possible visual regressions.</li> </ul>"},{"location":"developers/contributing/#testing-features-of-the-vs-fltk-library","title":"Testing features of the vs-fltk library","text":""},{"location":"developers/contributing/#memory-profile-of-vs","title":"Memory profile of vs","text":""},{"location":"developers/contributing/#benchmarking-features-of-the-vs-fltk-library","title":"Benchmarking features of the vs-fltk library","text":""},{"location":"developers/contributing/#runtime-tests-in-vs","title":"Runtime tests in vs","text":"<p>Supported actions are described in here.</p>"},{"location":"developers/contributing/#programming-guidelines","title":"Programming guidelines","text":""},{"location":"developers/contributing/#about-exceptions","title":"About exceptions","text":"<p>Exceptions are fully allowed in the CLI at <code>/src/app</code>. However, they are strongly discouraged anywhere else in the library code, and it is possible they will be fully disabled via <code>-fno-exceptions</code> at some point. The main reason is that the UI should be fault-tolerant and provide as much functionality as possible even if parts of it are broken, like malformed XML files, some scripts failing compilation, missing resources and so on. Exceptions, in this sense, are internally handled and semantically supported by providing subtrees to be rendered in case of failure events. Exceptions should only be used in those cases when the application must stop, either because the error is not recoverable or because it would leave the rest of the application in an inconsistent state.</p>"},{"location":"developers/contributing/#memory-allocations","title":"Memory allocations","text":"<p>As for memory allocations, spawning small dynamic objects is also discouraged. If possible, stack allocations are a better alternative. Arrays with variable length on stack are totally fine to be used in place of local objects allocated on heap. <code>std::string</code> is also highly discouraged, make sure <code>std::string_view</code> is used instead whenever possible.</p>"},{"location":"developers/contributing/#about-log-levels","title":"About log levels","text":"<p>Internally these are the log levels supported and their relative semantics:</p> <ul> <li>INFO to present informational messages, often as a result of user requests</li> <li>OK to notify that a certain operation completed successfully.</li> <li>WARNING to notify that a certain operation was not able to fully succeed, something should be fixed, but everything is fine.</li> <li>CONTINUE to notify that a certain operation was skipped by design.</li> <li>PANIC to notify that a certain operation failed in a way which cannot be recovered (but the application can still run)</li> <li>LOG to introduce a log without any further connotation.</li> </ul> <p>For example, loading a remote resource:</p> <ul> <li>If the file was already cached, a <code>continue</code> message will be notified</li> <li>If no proper answer has been received from the remote host, a <code>panic</code> message is generated, since that content cannot be recovered</li> <li>If everything loaded fine, an <code>ok</code> message can be used</li> <li>If the component is using features which are not allowed by policies, <code>warning</code> messages can be generated.</li> </ul> <p>Log levels are:</p> <ul> <li>NORMAL to be emitted when running the program normally</li> <li>SILENT to be emitted when running the program even in silent mode</li> <li>VERBOSE to be emitted when running the program in verbose mode only</li> <li>DEBUG to be emitted always when running a debug build or in debugging mode.</li> </ul> <p>Each message must specify their semantic type and log level (normal by default). Usually:</p> <ul> <li><code>panic</code> messages have a <code>silent</code> log level</li> <li><code>ok</code> and <code>continue</code> messages are usually <code>verbose</code></li> <li><code>info</code>, <code>warning</code> and <code>log</code> are usually <code>normal</code></li> </ul>"},{"location":"developers/contributing/#documentation","title":"Documentation","text":"<p>Documentation is written in markdown. Files within <code>docs</code> will be shipped with <code>vs</code> and are expected to read by the internal markdown component. As such:</p> <ul> <li>They must be written in CommonMark (with some possible extensions like the block headers for notices or warnings).</li> <li>They shall not include HTML within them. XML will be parsed as normal <code>vs</code> code.</li> </ul> <p>Files which are written in markdown, but are outside the <code>docs</code>, can follow a more relaxed format and target github/gitlab extensions for visualization.</p>"},{"location":"developers/releasing/","title":"Releasing","text":""},{"location":"developers/releasing/#todo-list-for-releases","title":"Todo list for releases","text":"<p>Ideally all these steps should be made automatic when a release request is triggered. But for now they are not, so use this as a checklist for reference:</p> <ul> <li> Make sure tests are all passing with the current commit (locally).</li> <li> Update the version number in <code>package.json</code> to the next odd revision.</li> <li> Clear content in <code>TODO.md</code>.</li> <li> Make sure <code>RELEASE.md</code> is up to date. Copy it in <code>./docs/releases/</code> using the version name as filename.</li> <li> Run the full codegen step.</li> <li> Commit &amp; push.</li> <li> Double check CI are good.</li> <li> Prepare a tagged release on github. This will trigger the construction of all artifacts.</li> <li> Docker images</li> <li> Full source archive including subprojects to fix their version</li> </ul> <p>After release:</p> <ul> <li> Update the version number in <code>meson.build</code> and <code>package.json</code> to the next even revision.</li> <li> Clear content in <code>RELEASE.md</code></li> <li> Manually trigger a release for distribution on the other repository by tagging a new version under the same number.       This will generate:</li> <li>Deb packages</li> <li>Flatpak</li> <li>et cetera</li> </ul>"},{"location":"developers/todo/","title":"Todo","text":""},{"location":"developers/todo/#missing-for-release-011","title":"Missing for release 0.1.1","text":""},{"location":"developers/todo/#scripts","title":"Scripts","text":"<ul> <li> turn off (for now) app linking capabilities</li> <li> Make all paths being used by the c and js pipeline portable.</li> </ul>"},{"location":"developers/todo/#setup-github-actions","title":"Setup github actions","text":"<ul> <li> ? To run tests and save its reports on some backend</li> <li> ? To run benchmarks and save its reports on some backend (variable system load will destroy performance metrics?)</li> <li> ? To run the full flatpak-builder. For referencehttps://github.com/flatpak/flatpak-github-actions</li> </ul>"},{"location":"developers/todo/#current","title":"Current","text":"<p>All these notes should be progressively removed from here and recorded as github issues.</p>"},{"location":"developers/todo/#xsd-rng","title":"XSD -&gt; RNG?","text":"<p>XSD as an XML schema format is not that good. RelaxNG better captures the flexible nature of vs files, so I would be better off considering it as I did for <code>vs.templ</code> already.</p>"},{"location":"developers/todo/#loading-xml-issues","title":"Loading XML issues","text":"<pre><code>[INFO]     : Loading component file://./two-buttons.xml @ [/app/fl:window/TwoButtons]\n[INFO]     : Requested loading of file `file://./two-buttons.xml`\n[PANIC]    : Oh no! Loading failed `file://./two-buttons.xml` for 2\n[INFO]     : Loading failed, file cannot be opened file://./two-buttons.xml @ [/app/fl:window/TwoButtons]\n</code></pre> <p>At times it fails, at times it does not. Investigate and check against syntax in specs.</p> <pre><code>    &lt;import src=\"this://two-buttons.xml\" as=\"TwoButtons\" /&gt;\n</code></pre> <p>works but</p> <pre><code>    &lt;import src=\"file://./two-buttons.xml\" as=\"TwoButtons\" /&gt;\n</code></pre> <p>does not somehow. But just <code>./two-buttons.xml</code> does? Check why!</p>"},{"location":"developers/todo/#infrastructural","title":"Infrastructural","text":"<ul> <li> Add namespaces for vs elements and fltk elements</li> <li> Expose some sort of inverse for apply_prop, where selected fields can be read from a widget.</li> <li> (?) Add special <code>inherit</code> value to props to remove the current one and let it be computed based on its parents? I have to decide if we want this one.</li> <li> Serialize the current UI structure in some format to be consumed by other services (AI assistants, speech dispatcher etc)</li> <li> Add pipelines for compilation &amp; testing on github/gitea</li> <li> Basic LSP for the vs syntax. Implementation @ https://github.com/KaruroChori/vs-fltk-lsp</li> <li> Make some dependencies and their related features toggleable at build-time (tcc, quickjs, lua, wamr).</li> <li> Decide what to do about swift.</li> <li> I probably want https://github.com/fmtlib/fmt</li> <li> Signal/event propagation mechanisms</li> <li> Add special logging to generate output used by more complex tests. They must also be exposed to scripts.        These logs are only recorded if VS_DEBUG_FILE is set to a file name, and will result in a key,value dictionary which is later checked against reference as part of the test.</li> <li> Namespace support</li> <li> In the root of app or components search for <code>xmlns</code> attributes, and define local namespaces based on <code>vs</code>, <code>vs.templ</code> &amp; <code>vs.fltk</code>.</li> <li> Codegen for reserved elements &amp; attributes in the vs namespace. Like for <code>vs.fltk</code>.</li> <li> Evaluate and check if possible to replace sqlite with https://github.com/tursodatabase/libsql as it looks like the better (it supports alteration of foreign keys for example)</li> <li> Installation!</li> <li> Rewrite TS stuff in meson directly</li> <li> Update internal paths to work in both build and installed mode.</li> <li> Man page</li> <li> deb (mounted on opt, as most dependencies are needed recent and potentially forked)</li> <li> flatpak<ul> <li> Swift6 is added, but meson cannot find swiftc. Why?</li> <li> Unable to append args to meson setup</li> </ul> </li> <li> Escape vs_debug (tabs).</li> <li> Add TESTING flag in scripts to determine if some content should be run or not.</li> <li> Add contextual information in app and component (keys, policies &amp; paths). Remove them from ui_tree as they can be accessed via root.</li> <li> Once that is done, properly implement the path type for props, to resolve correctly.</li> </ul>"},{"location":"developers/todo/#scripting","title":"Scripting","text":"<ul> <li> Expose path and the fetcher to embedded script at some degree.</li> <li> Make errors in C scripts less useless</li> <li> Add <code>#line</code> to C library to properly count lines for error location</li> <li> Support for compact scripts</li> <li> C script</li> <li> JS script</li> </ul>"},{"location":"developers/todo/#components","title":"Components","text":"<ul> <li> Enable codegen</li> <li> Simplify codegen for all computed/props types which are not <code>raw</code> by writing more or the boilerplate.</li> <li> and port the current code over the new codegen architecture.</li> <li> Viewport element.</li> <li> Fix on.failure and on.loading to match specs in <code>use</code> element.</li> <li> Add properties on containers to set their type/mode whatever.</li> <li> Split align property</li> <li> Split font property</li> <li> Add debug component</li> </ul>"},{"location":"developers/todo/#paths","title":"Paths","text":"<ul> <li> Extend support for more virtual paths (all but those based on sqlite which will be handled later on)</li> </ul>"},{"location":"developers/todo/#dynamic-library-linking","title":"Dynamic Library linking","text":"<ul> <li> Add support of loading of so/dylib/dll modules</li> <li> Test linking</li> <li> On http/s &amp; gemini (the cache is now generic)</li> <li> Without libc?</li> <li> If nobuiltin is not usable, I need to add more of libtcc to meson targets.</li> <li> Fix building process of tcc to generate the minimal libraries needed.</li> </ul>"},{"location":"developers/todo/#policies","title":"Policies","text":"<ul> <li> Add support for env variables to fully disable native code, internet access and to run headless.        Once profiles are ready this will be obsoleted, but for now I need for testing and to let people use it \u201csafely\u201d</li> <li> Policies are so complex to write manually and very easy to mess them up.       Maybe code generation starting from a schema might be a better option.</li> <li> Support basic embedded script policies.</li> </ul>"},{"location":"developers/todo/#caching","title":"Caching","text":"<ul> <li> <p> Caching all done (no SQLITE, for that there is a different milestone)</p> <ul> <li> Source files</li> <li> From fs</li> <li> From network</li> <li> Pugi XML documents</li> <li> Cache support</li> <li> Save XML trees while parsing</li> <li> Scripts</li> </ul> </li> <li> <p> Caching all done (SQLITE part)</p> </li> <li> kv</li> <li> res</li> <li> secrets</li> <li> DB schemas</li> </ul>"},{"location":"developers/todo/#props-computed-getters-and-setters","title":"Props, computed, getters and setters","text":"<p>I would like to implement an architectural change how these concepts are handled. Schemas will be defining objects for which <code>getters</code> and <code>setters</code> are defined. Some component might allow for arbitrary definitions (already the case for the dispatcher which could be recycled), but most are fixed. Props are just calls to setters for which expression evaluation from a string is available. They are just an artifact of XML components, native ones for the most part are only going to use <code>getters</code> and <code>setters</code> directly.</p> <p>It is also possible to mark specific objects as <code>persistent</code>. Those will be recorded as secrets &amp; recovered if so desired. It is also possible to mark specific objects as <code>semantic</code>. Those will be reported in the serialization.</p>"},{"location":"developers/todo/#supported-environments","title":"Supported environments","text":""},{"location":"developers/todo/#tcc","title":"TCC","text":"<ul> <li> Add basic support for TCC</li> <li> Provide extensive bindings for TCC</li> <li> Stage 0</li> <li> Stage 1 Full subset of libc</li> <li> Stage 2 Full interface for ui tree operations</li> <li> UI base support of module scripts</li> <li> UI base support of getters/setters.</li> <li> Add an alternative backend like Cello</li> <li> Add an alternative backend like Vala (?)</li> </ul> <p>All done for now</p>"},{"location":"developers/todo/#wasmwasi","title":"WASM/WASI","text":"<p>Why is WASM so frustrating to work with!?! No compiler can compile itself into a wasm/wasi binary. AssemblyScript is a mess that is barely able to generate itself with WASI, but still it requires binaryen distributed alongside. Because of a series of requirements, V8 is basically the only runtime capable of running that combo. An all LLVM versions for wasm/wasi I tried were failures (or half so).</p> <p>I am starting to regret java bytecode already.</p> <p>Notice: the wasmer registry seems to have a small collection of clang builds on it. It might be good enough to start experimenting. https://wasmer.io/taybenlor/runno-clang</p> <ul> <li> Integrate an engine (WAMR)</li> <li> Find a way to have llvm/clang running as wasm an build to wasm (no emscripten) cannot do that</li> <li> Find a way to integrate assemblyscript as a language and embeding the compiler ahah. not working</li> </ul>"},{"location":"developers/todo/#quickjs","title":"QuickJS","text":"<ul> <li> Add quickjs to the repo</li> <li> Add basic support for quickjs embedded scripts.</li> <li> UI base support of module scripts</li> <li> Support of getters and setters</li> </ul>"},{"location":"developers/todo/#lua","title":"LUA","text":"<ul> <li> Add Lua &amp; LuaJIT to the repo</li> <li> Add baseline support for Lua embedded scripts.</li> </ul>"},{"location":"developers/todo/#unclassified","title":"Unclassified","text":""},{"location":"developers/todo/#general","title":"General","text":"<ul> <li> Refactor the ui_tree to better handle different classes of components</li> <li> Prepare infrastructure for codegen (no impl yet)</li> <li> Move all the tcc stuff in proper pipelines</li> <li> <p> Add more components to play with</p> </li> <li> <p> For speed of development, many operations are written recursively.       The stack is pretty limited, so either there is tail recursion or stacks in heap must be used.</p> </li> <li> Add caching &amp; preloading to avoid making the process of building UI dog slow.</li> <li> Partial implementation to support modules</li> <li> Partial implementation to load resources in memory within the session (they might be promoted once SQLITE gets integrated)</li> </ul>"},{"location":"developers/todo/#references-for-ffi-lua","title":"References for FFI &amp; Lua","text":"<ul> <li>https://github.com/shajunxing/quickjs-ffi</li> <li>https://github.com/q66/cffi-lua</li> <li>https://github.com/LuaJIT/LuaJIT</li> <li>http://lua-users.org/wiki/SimpleLuaApiExample</li> </ul> <p>Probably I will allow switching between Lua &amp; LuaJIT with a compile flag.</p>"},{"location":"developers/versioning/","title":"Versioning","text":""},{"location":"developers/versioning/#versioning","title":"Versioning","text":"<p>At this time, this repository is only available as a meson package. Releases are tagged on the repo, with <code>master</code> as the main development branch. Semantic versioning will be followed after <code>v1.0.0</code>. Before that, any release can and will have breaking changes.</p> <p>Versions ending with an odd revision number are meant for proper releases, while even numbers are only for in-dev stages.</p>"},{"location":"developers/ideas/app-packaging/","title":"App packaging","text":"<p>At the moment the way <code>app</code> is designed is not really great in my opinion. It lacks the ability to properly describe information about it and its distribution. Also, it forces the distribution of an application in multiple files, which might not always be desirable. Even less so if the plan is to distribute them as single executables at some point. So\u2026</p> <pre><code>&lt;package framework=\"vs.fltk\" name=\"...\" origin=\"url\" type=\"app\" version=\"\"&gt; &lt;!-- types can be app/lib/patch/data for now --&gt;\n    &lt;!-- Strings for internationalization --&gt;\n    &lt;i18n src=\"...\" default=\"en-uk\"&gt;\n        &lt;!--This part is very limited and only related to this specific file--&gt;\n        &lt;entry tag=\"...\" desc=\"...\"&gt;\n            &lt;locale lang=\"en\" country=\"uk\"&gt;...&lt;/locale&gt;\n        &lt;/entry&gt;\n    &lt;/i18n&gt;\n\n    &lt;metadata&gt;\n        &lt;authors&gt;\n            &lt;entry src=\"...\" covers=\"\" excludes=\"\"/&gt;\n        &lt;/authors&gt;\n        &lt;licences&gt;\n            &lt;entry src=\"...\" covers=\"\" excludes=\"\"/&gt;\n        &lt;/licences&gt;\n        &lt;changelog&gt;\n            &lt;entry src=\"...\" version=\"\"/&gt;\n        &lt;/changelog&gt;\n        &lt;links&gt;\n            &lt;entry ref=\"...\" label=\"...\"&gt;\n        &lt;/links&gt;\n        &lt;signature authority=\"...\" value=\"...\"/&gt;\n        &lt;package-id&gt;...&lt;/package-id&gt;\n        &lt;icon&gt;&lt;/icon&gt;\n        &lt;description&gt;&lt;/description&gt;\n        &lt;repo ref=\"...\"/&gt;\n    &lt;/metadata&gt;\n\n    &lt;link-with&gt;\n        &lt;entry src.object=\"\" src.header=\"\"/&gt;\n    &lt;/link-with&gt;\n\n    &lt;policies&gt;\n    &lt;/policies&gt;\n\n    &lt;deps&gt;\n        &lt;dep name=\"\" src=\"\" version=\"\" excludes=\"\" signature=\"\"/&gt;  &lt;!--body is foldback--&gt;\n        &lt;patch for=\"\" src=\"\" signature=\"\"/&gt; &lt;!--body is foldback--&gt;\n    &lt;/deps&gt;\n\n    &lt;entry src=\"...\"&gt;\n       &lt;!--Alternative if `src` fails or is not specified --&gt;\n    &lt;/entry&gt;\n&lt;/package&gt;\n</code></pre>"},{"location":"developers/ideas/auto-ui-actions/","title":"Auto ui actions","text":"<p>Warning</p> <p>None of what follows has been implemented yet. These are just specs to sketch out the idea. It will probably its own separate project like <code>vs.templ</code> as it needs a tight <code>fltk</code> integration.</p> <p>Automatic UI actions are sourced from a XML file, and run sequentially once the UI has been fully built. These actions are designed for machine usage and macros. Typical scenarios can be: - To replace human input in automatic testing pipelines. - In documentation, to show users how to do something within the application. - To allow LLM agents or crawlers to operate on a UI built with vs.</p>"},{"location":"developers/ideas/auto-ui-actions/#supported-actions","title":"Supported actions","text":"<ul> <li><code>action.sleep</code> wait for some time before proceeding.</li> <li><code>action.click</code> to run the callback associated to a widget.</li> <li><code>action.fill</code> to add some value as keyboard input or copy/cut.</li> <li><code>action.tab</code></li> <li><code>action.focus</code></li> <li><code>action.wait</code> to wait for some condition on the ui to be true.</li> </ul>"},{"location":"developers/ideas/auto-ui-actions/#special-blocks-for-testing","title":"Special blocks for testing","text":"<ul> <li><code>test</code> the test is resolved. <ul> <li><code>deny</code> the test ends and is marked as unresolved.</li> <li><code>accept</code> if unresolved, continue with the next operation.</li> <li><code>exit</code> to end the application.</li> </ul> </li> </ul>"},{"location":"developers/ideas/auto-ui-actions/#support-in-documentation","title":"Support in documentation","text":"<p>Documentation for vs projects is intended to be written in Markdown. As such, XML code can be directly embedded in it, which means vs components are usable (please notice that based on the local policies, this functionality might be disabled). The special component <code>fl:inline-helper</code> can embed UI actions in it, which will run on request.</p>"},{"location":"developers/ideas/auto-ui-actions/#additional-props-to-handle-semantics","title":"Additional props to handle semantics","text":"<p>Additional explicit information should be provided to ensure the semantic of the exposed UI components is explained. This is done by nesting a <code>semantics</code> element to each element needing that. Elements with <code>semantics</code> specified should also have a <code>name</code> attribute.   For example: <pre><code>&lt;fl:container&gt;\n&lt;script&gt;\n    void on_new(){}\n    void on_open(){}\n    void on_delete(){}\n\n    $cb(on_new)\n    $cb(on_open)\n    $cb(on_delete)\n&lt;/script&gt;\n&lt;semantics&gt;\n    &lt;callback name=\"on_new\"&gt;Explanation&lt;/callback&gt;\n    &lt;callback name=\"on_open\"&gt;Explanation&lt;/callback&gt;\n    &lt;callback name=\"on_delete\"&gt;Explanation&lt;/callback&gt;\n&lt;/semantics&gt;\n&lt;fl:button on.callback=\"on_new\" label=\"New\"/&gt;\n&lt;fl:button on.callback=\"on_open\" label=\"New\"/&gt;\n&lt;fl:button on.callback=\"on_delete\" label=\"New\"/&gt;\n&lt;/fl:container&gt;\n</code></pre></p> <p>This additional context is extremely good to automatically generate documentation, but also to ensure proper contextual information is given to autonomous agents using the UI.</p>"},{"location":"developers/ideas/caching/","title":"Caching","text":"<p>Warning</p> <p>Revision needed as the first fragments of caching have been implemented.</p> <ul> <li><code>file://</code> prefix for all files mounted on fs, both absolute and relative.</li> <li><code>http(s)://</code> prefix for resources obtainable via internet (libcurl?).</li> <li><code>this://</code> relative prefix based on the local base (only supporting file, http/s, packages, app, user).</li> <li><code>packages://</code> prefix for where external libraries are downloaded and locally stored (CORS safety like for http/s based on the package name)</li> <li><code>app://</code> prefix for the root where shared libraries and includes are stored (bindings included)</li> <li><code>user://</code> location where permanent files are allocated (downloaded stuff, generated configuration)</li> <li><code>sock://</code> virtual location to the UNIX socket (?) for external code execution</li> <li><code>storage://</code> prefix for the persistent DB storage</li> <li><code>session://</code> prefix for temporary resources available during the current session.</li> </ul>"},{"location":"developers/ideas/caching/#extensions","title":"Extensions","text":"<p>Some tags do have a <code>src</code> attribute:</p> <ul> <li>Optional for <code>script</code> in case inline content is not provided. If defined and the src load fails its content is used instead.   If used with <code>file</code>, <code>http(s)</code>, <code>app</code>, <code>user</code> it will try to match the full name. In case of failure if no typical extension is matched it will try to take it (considering the alternatives due to portability factors)   If used with <code>sock</code>, <code>storage</code>, <code>session</code> or <code>cache</code> only <code>store/uuids</code> are usable, and in most cases are just for internal usage.</li> <li>Needed for the <code>import</code> block. Same rules as for script.</li> <li>Needed for <code>use</code>. Same rules as for script.</li> </ul> <p>All tags with <code>src</code> also have cache policy. Default is <code>session</code>.</p> <ul> <li><code>no-cache</code></li> <li><code>session</code></li> <li><code>forever</code></li> <li>Simple number Timestamp of invalidation.</li> <li>Number with <code>+</code> prefix, max time before invalidation since last aquisition.   Keep in mind, even if invalidated already rendered objects will not re-render on their own.</li> </ul> <p>All <code>use</code> (or forwarded nodes from the list of imports) allows for the definition of <code>policy-safety</code>:</p> <ul> <li><code>unrestricted</code> is the default and lets any code to run</li> <li><code>safe</code> only wasm and quickjs can run, but globally defined and cached components can still</li> <li><code>safest</code> only wasm and quickjs can run.   Children cannot be less safe of the parent. If so its original will be inherited.</li> </ul> <p>Auth tokens are used to determine which application is running. Every <code>app</code> and <code>component</code> can set its own authtoken as a cryptohash of the provided uuid with the one of the user. Components cannot gather information about authtokens once computed, so the user secret is generally safe. Setting it to an empty string will generate a random one. Using the original user secret as auth token (not exposed, not usable, just internal) determines shared globals. They are not trivially used by components as a failsafe</p>"},{"location":"developers/ideas/expected-new-getters/","title":"Expected new getters","text":"<pre><code>&lt;component&gt;\n    &lt;script lang=\"c\"&gt;\n        int set_name(const void*){}\n        int get_name(void*){}\n\n        $field {\n            \"name\",\n            set_name,\n            get_name,\n        }\n    &lt;/script&gt;\n&lt;/component&gt;\n</code></pre>"},{"location":"developers/ideas/revised-namespaces/","title":"Revised namespaces","text":"<ul> <li>Starting with <code>#</code> they cannot be reached via public APIs. If <code>node</code>,<code>container</code>,<code>slot</code> or <code>container-slot</code> they are just private namespaces with the relative restrictions. Being private, there is no way to reference those by name via public APIs.</li> <li>Any child of an element tagged as <code>leaf</code> will be placed in the nearest parent namespace available based on the XML tree structure. There is always one.</li> </ul>"},{"location":"developers/ideas/sandboxing/","title":"Sandboxing","text":""},{"location":"developers/ideas/sandboxing/#app-class-keys","title":"App-Class Keys","text":"<p>App-Class keys are the main mechanism to ensure data sandboxing across applications, even when part of the same rendered UI.</p> <ul> <li>App-class keys are meant to be unique across a class of apps which can be considered as strongly related.   For example the equivalent of web pages from the same domain would likely share the same app-class key under vs.</li> <li>App keys are not used as they appear in source, but are computed based on the parent one. For top level app-class keys, the parent key used for mixing is the secret one for each user.</li> <li>It is possible to record metadata for app-class keys, like the owner and which domains are allowed to use it. It might be a good idea to provide some form of registry shipped with vs and updated of known entries.</li> </ul>"},{"location":"developers/ideas/sandboxing/#viewports","title":"Viewports","text":"<p>Viewports are a way to break the chain of keys, ensuring that an embedded app can be directly attached to the user root key, no matter how nested it is located. This poses some safety concerns, so there are strong restrictions in how viewports are handled:</p> <ul> <li>No information can be exchanged between its content and the parent for example.</li> <li>Some application might refuse to run within a viewport, unless all its parent up to root are restricted to some specific safety policies.</li> </ul>"},{"location":"developers/ideas/sandboxing/#visibility-specifiers","title":"Visibility specifiers","text":"<p>Visibility specifiers are the third and last way to sandbox content, and it is by limiting access to nodes in the UI tree.</p> <ul> <li>leaf terminal node. No named children below (and even if there are, we cannot see it; in that case slot should be used).</li> <li>node pass-through both up and down.</li> <li>container children cannot go up beyond the container.</li> <li>slot parents cannot get any lower, beyond the slot.</li> <li>slot-container children cannot go up, parents cannot go down.</li> </ul> <p>Notice! There is some unintuitive behaviour based on these rules: given <code>node:A -&gt; slot:B -&gt; leaf:C</code> as starting from <code>A</code>, <code>B</code> can be resolved, <code>C</code> cannot. However, <code>B/C</code> is resolved as one can reach <code>B</code> from <code>A</code> and <code>C</code> from <code>B</code>. To avoid propagation, boundary elements should be kept nameless so that they cannot be later recalled in a path expression and are purged from all serializations.</p>"},{"location":"developers/ideas/signals/","title":"Signals","text":"<p>Originally, a separate mechanism to handle custom events or signals was envisioned. However, the current infrastructure should be enough to support them.</p> <p>Each frame should have a special symbol <code>$handler</code> or something like that which can: - Raise the event top (if not a slot and coming from down). - Propagate down to all children except the direction it is coming from (if not a container and coming from up) Events self-raised can be propagated top and down regardless of the self type.</p> <p>If not implemented the handler will follow any direction encoded within the signal packet to determine where it should go. Else, the custom implementation will take over, but the basic propagation functions are exposed for use.</p>"},{"location":"developers/ideas/signals/#signal-packet","title":"Signal packet","text":"<ul> <li>Origin (ptr).</li> <li>Dest (ptr).</li> <li>From, the node this event was propagated from. It changes as the packet is propagated.</li> <li>Payload (buffer)</li> <li>Bubble up flag. Suggestion to propagate the event up.</li> <li>Propagate down flag. Suggestion to propagate the event down.</li> <li>Once flag. Suggestion to stop evaluation when the first match is found.</li> <li>Function to determine if a node should or should not be selected for propagation (a pre-filter)</li> <li>Maximum propagation level (to avoid looping them forever in strange cases)</li> </ul>"},{"location":"developers/old-technical/specs/","title":"Specs","text":""},{"location":"developers/old-technical/specs/#app-component","title":"app &amp; component","text":"<p>Both <code>app</code> and <code>component</code> are supporting virtually the same underlying structure, and they only differ as one can be root for an application, the other does not.</p>"},{"location":"developers/old-technical/specs/#attributes","title":"Attributes","text":"<ul> <li><code>app.token</code> unique id for this app, used to separate pages in cache. It is a 512bit key expressed in hex notation. If set to <code>\"\"</code> a random one will be assigned. Unlike <code>component</code>, <code>app</code> must define it as it cannot inherit and expose the secret user token directly.</li> </ul>"},{"location":"developers/old-technical/specs/#special-children","title":"Special children","text":"<ul> <li><code>metadata</code> contains sub-field for information about the author, licence etc. It is made available as map to the entire application</li> <li><code>script.global</code> contains sub-tags <code>decl</code> and <code>impl</code>. Each will have the same fields as normal <code>script</code>. Only one for each is allowed, and only one <code>script.global</code> can be defined per <code>app</code>/<code>component</code></li> <li><code>import</code> with attribute <code>src.*</code> and <code>as</code></li> <li><code>policies</code> TBD</li> </ul>"},{"location":"developers/old-technical/specs/#normal-children-attributes","title":"Normal children &amp; attributes","text":"<p>Both <code>app</code> &amp; <code>component</code> can contain any tag or attribute as the other container-like tags.</p>"},{"location":"developers/old-technical/specs/#container-like-components","title":"container-like components","text":""},{"location":"developers/old-technical/two-pass/","title":"Main rendering loop (to revised)","text":"<p>The UI must all be run in a single thread, which can slow down things. For this reason rendering is split in two passes.</p>"},{"location":"developers/old-technical/two-pass/#first-pass","title":"First pass:","text":"<p>During the first pass all tags needing complex or long computation (loading files from the internet or compiling stuff) will preload data based on the respective caching policies. Each src or resource to handle can have its own thread, and results are collected on protected data structures. The original xml is updated with special <code>src-cached</code> attributes, so that they are used as references in place of the original source. Excluded are elements where a special tag is used to mark them not to be prefetched. And also <code>not module scripts</code> and <code>data</code> which are handled later.</p>"},{"location":"developers/old-technical/two-pass/#rendering","title":"Rendering","text":"<p>UI is rendered. Resources which were marked not to be fetched earlier are handled stopping the main thread. <code>not module scripts</code> and <code>data</code> once met are added to a pool, and handled asynchronously.</p>"},{"location":"developers/old-technical/two-pass/#final-join","title":"Final join","text":"<p>After waiting for the second pool of threads to complete, all the missing things are added, events enabled, and the process is finished.</p>"},{"location":"developers/old-technical/two-pass/#component-rendering-steps","title":"Component rendering steps","text":"<ul> <li>Allocate the new component</li> <li>Resolve mixin, data or script inside first, before any other children. They are not real DOM children.</li> <li>Apply all props (mixin+inline)</li> <li>Run on children (except for terminal widgets)</li> </ul>"},{"location":"developers/old-technical/xml-format/","title":"Xml format","text":""},{"location":"developers/old-technical/xml-format/#roots","title":"Roots","text":"<p>The top level object is marked as <code>app</code> and is effectively the application root. The loader in running mode will require an xml with such an entry point (the root cannot be a native object). The tag <code>component</code> is used as the top level for any reusable component.</p>"},{"location":"developers/old-technical/xml-format/#tag-conventions","title":"Tag conventions","text":"<p>UI components are not scoped in a namespace, however by convention they are all written in lower letters. Custom user components should have the first letter as capital, or use some namespace like <code>hello:world</code>.</p>"},{"location":"developers/old-technical/xml-format/#attribute-conventions","title":"Attribute conventions","text":"<p>Attributes can often be composed, like multiple parts making up the full attribute, at least logically. For example <code>box</code> can be split in <code>box.x</code>, <code>box.y</code>, <code>box.w</code> and <code>box.h</code>. If intersective, the more nested variant takes priority. So <code>box=\"0,0,0,0\" box.x=\"10\"</code> will be equivalent to <code>box=\"10,0,0,0\"</code> regardless of order.</p>"},{"location":"developers/old-technical/xml-format/#reserved-names","title":"Reserved names","text":"<ul> <li><code>app</code></li> <li><code>component</code></li> <li><code>use</code></li> <li><code>import</code></li> <li><code>script</code></li> <li><code>script.global</code></li> <li><code>data</code></li> <li><code>res</code> for externally loaded resources, later usable via its name symbol</li> <li><code>namespace</code> to scope names within a component, limit upper and lower visibility, filter events and determine</li> </ul> <p>Within each, some additional tags might be reserved. All the other names are free, except for widgets based on your distribution. As for attributes there are only a handful which are always reserved:</p> <ul> <li><code>name</code></li> <li><code>groups</code></li> <li><code>on.*</code>: can only be used to define callbacks. Custom events are possible, but they have a specific semantics &amp; side effects.</li> <li><code>auth</code> and all its sub-arguments</li> <li><code>src</code> and all its sub-arguments</li> <li><code>body</code> and all its sub-arguments</li> </ul> <p>There are few that, while not restricted, should only be used if following the same semantics:</p> <ul> <li><code>box</code></li> <li><code>label</code></li> <li><code>visible</code></li> <li><code>enabled</code></li> </ul>"},{"location":"full-specs/","title":"Index","text":"<p>Important</p> <p>This project is very much in its infancy. These specs will provide information about features which are yet to be implemented. Broadly speaking, they target at least <code>v0.5.x</code> from the milestone page</p>"},{"location":"full-specs/#quick-overview","title":"Quick overview","text":"<p><code>vs</code> is a lightweight runtime to design and run custom user interfaces based on fltk. It aims to be fast, to fit on systems with limited resources available, and to run on virtually any platform. The <code>vs</code> runtime ships with several built-in features, tools and libraries:</p> <ul> <li>A self-hosted workspace/explorer to quickly access local and remote apps, to update <code>vs</code>, and to visually customize user settings.</li> <li>A self-hosted UI builder/IDE to visually inspect, debug or write custom components and applications.</li> <li>C bindings to expose most features and allow custom native components from third parties.</li> <li>A language server &amp; extension to directly handle <code>.vs</code> and <code>.tvs</code> files in vscode and compatible editors.</li> </ul>"},{"location":"full-specs/#structure-of-an-application","title":"Structure of an application","text":"<ul> <li>An entry-point file referred as app, whose root element is <code>app</code>.</li> <li>Components, whose root element is <code>component</code>, either used from the entry-point file or other components.</li> <li>Data sources, usually files with a specific format or endpoints with a well-defined interface.</li> <li>Assets like images.</li> <li>An optional external application usually as a dynamic library linked with the app, or indirectly used via a Unix socket domain.</li> </ul> <p>Furthermore, there are additional elements which are not controlled by those writing the app, but on the user side:</p> <ul> <li>A storage where secrets and persistent data can be saved.</li> <li>A profile with clear permissions and safety policies. An application can provide one as asset suggesting the user to adopt it, but it has no control over what the user decides.</li> </ul> <p>Both apps and components can be either specified as final <code>vs</code> xml files, or they can be the result of some static data and a template compiled down into \u201cfinal\u201d xml files.</p>"},{"location":"full-specs/#basic-vs-elements","title":"Basic VS elements","text":""},{"location":"full-specs/#basic-attributes-for-frame-able-components","title":"basic attributes for frame-able components","text":"<p>Except for some special entity or those which cannot have a <code>vs</code> frame, there are some attributes shared by everyone</p> attribute type default description <code>name</code> <code>string?</code> <code>mixins</code> <code>frame.mode</code> <code>frame.access</code> <code>frame.type</code>"},{"location":"full-specs/#basic-attributes-for-flxxx","title":"basic attributes for fl:xxx","text":"<p>TODO: Add link to automatically generated docs</p>"},{"location":"full-specs/#app","title":"app","text":""},{"location":"full-specs/#attributes","title":"attributes","text":"attribute type default description <code>key</code> <code>blob(256)?</code> <code>null</code> If set, this is the class key used by the component. It requires fat components <code>tag</code> <code>string?</code> <code>null</code> If set, this is the page-tag information to distinguish different pages within the same class keys <code>link-with</code> <code>path?</code> <code>null</code> If set, the dynamic library to expose to each embedded script"},{"location":"full-specs/#component","title":"component","text":""},{"location":"full-specs/#attributes_1","title":"attributes","text":"attribute type default description <code>thin</code> <code>boolean</code> <code>true</code> If true, this component will not allow storing app class keys, policies and path information <code>auto-prune</code> <code>boolean</code> <code>false</code> If true, remove this component from the tree, directly expanding its children. Incompatible with <code>thin: false</code> <code>key</code> <code>blob(256)?</code> <code>null</code> If set, this is the class key used by the component. It requires fat components <code>tag</code> <code>string?</code> <code>null</code> If set, this is the page-tag information to distinguish different pages within the same class keys"},{"location":"full-specs/#namespace","title":"namespace","text":""},{"location":"full-specs/#metadata","title":"metadata","text":"<p><code>metadata</code> are is a pseudo-element which must be placed as direct children of an <code>app</code> or <code>component</code> entity. Entries inside it will be parsed for documentation, attribution or to provide versioning information.</p>"},{"location":"full-specs/#import","title":"import","text":"<p><code>import</code> are directives which must be placed as direct children of an <code>app</code> or <code>component</code> entity.</p>"},{"location":"full-specs/#use","title":"use","text":""},{"location":"full-specs/#data","title":"data","text":""},{"location":"full-specs/#attributes_2","title":"attributes","text":"<ul> <li><code>src</code></li> <li><code>filter</code></li> <li><code>sort</code></li> <li><code>order</code></li> </ul>"},{"location":"full-specs/#debug","title":"debug","text":""},{"location":"full-specs/#attributes_3","title":"attributes","text":"<ul> <li><code>key</code></li> <li><code>value</code></li> </ul>"},{"location":"full-specs/#viewport","title":"viewport","text":""},{"location":"full-specs/#attributes_4","title":"attributes","text":"<ul> <li><code>src</code></li> </ul>"},{"location":"full-specs/#elements-with-a-frame","title":"elements with a frame","text":""},{"location":"full-specs/#attributes_5","title":"attributes","text":"<ul> <li><code>name</code></li> <li><code>mixins</code></li> <li><code>frame.mode</code></li> <li><code>frame.acces</code></li> <li><code>frame.type</code></li> </ul>"},{"location":"full-specs/#script","title":"script","text":"<p><code>script</code>s are pseudo-entities which must be placed as direct children of a frame-able entity. Only one for each frame-able entity can be defined.</p>"},{"location":"full-specs/#attributes_6","title":"attributes","text":"attribute type default description <code>lang</code> <code>string?</code> <code>null</code> If unset, the language will be automatically inferred from contextual information <code>src</code> <code>path?</code> <code>null</code> If set, its content will only be used as fall-back and the src content will be preferred. <code>type</code> single, module single Used to specify if it should be handled as a single user script or a shared one (TODO:link) <code>compact</code> <code>boolean</code> <code>false</code> If set, all code is assumed to be inside the body of the default callback."},{"location":"full-specs/#mixin","title":"mixin","text":"<p><code>mixin</code>s are pseudo-entities which must be placed as direct children of a frame-able entity. Only one for each frame-able entity can be defined.</p>"},{"location":"full-specs/#attributes_7","title":"attributes","text":""},{"location":"full-specs/#semantics","title":"semantics","text":""},{"location":"full-specs/#using-components","title":"Using components","text":"<p>There are two ways to use other components inside others or within your app:</p> <ul> <li>Via <code>vs:use</code>, suggested for cases where it is only needed once.</li> <li>Adding a <code>vs:import</code> directive in the app/component, and using it as an element under the specified name.</li> </ul> <p>There is also <code>vs:viewport</code> which does something similar, but in this case a new root is rendered within your document, with no event or symbol being passed top/down or bottom/up.</p>"},{"location":"full-specs/#examples","title":"Examples","text":"<pre><code>&lt;vs:component tag.suggested=\"component-a\"&gt;\n    &lt;vs:import src=\"this://component-b.vs\" tag=\"component-b\"/&gt;\n\n    &lt;component-b prop-1=\"value-1\"/&gt;\n&lt;/vs:component&gt;\n</code></pre> <pre><code>&lt;vs:component tag.suggested=\"component-a\"&gt;\n    &lt;vs:use vs:src=\"this://component-b.vs\" prop-1=\"value-1\"/&gt;\n&lt;/vs:component&gt;\n</code></pre>"},{"location":"full-specs/#names","title":"Names","text":"<p>Names are unique identifiers within a namespace for components. Adding a name to a component instance also implies that a vs frame is created for it. The converse is also true, and if no explicit name is assigned, one will be automatically generated. Related to names there are two undefined behaviours:</p> <ul> <li>Giving the same name to two or more elements within the same namespace.</li> <li>Accessing elements for which the name has not been manually defined.</li> </ul>"},{"location":"full-specs/#restrictions-on-names","title":"Restrictions on names","text":"<p>At this time, no restriction on names has been defined nor implemented.</p>"},{"location":"full-specs/#scope-of-visibility","title":"Scope of visibility","text":"<p>The scope within names are visible is called namespace. A namespace is not strictly speaking equivalent to the UI tree structure, and all elements within a namespace, regardless of their child/parent ordering, are mutually visible.</p>"},{"location":"full-specs/#transparent-nodes","title":"Transparent nodes","text":"<p>Some elements will have their associated frame and name, but their mode is set to <code>transparent</code>. In this case any child will be part of the same namespace as their parent, ignoring their tree dependency.</p>"},{"location":"full-specs/#limitations-on-visibility","title":"Limitations on visibility","text":"<p>Elements for which their mode is set to <code>container</code> or <code>slot-container</code> will prevent name resolution upwards from children. Elements for which their mode is set to <code>slot</code> or <code>slot-container</code> will prevent name resolution downwards to its children from nodes above it. A node, will always be able to access up and down, regardless of the mode set. Limitations are only for others going through it.</p>"},{"location":"full-specs/#props","title":"Props","text":""},{"location":"full-specs/#computed-values","title":"Computed values","text":""},{"location":"full-specs/#symbols","title":"Symbols","text":""},{"location":"full-specs/#callbacks","title":"Callbacks","text":""},{"location":"full-specs/#unknowns","title":"Unknowns","text":""},{"location":"full-specs/#fields-settergetters","title":"Fields (Setter/Getters)","text":""},{"location":"full-specs/#dispatcher","title":"Dispatcher","text":""},{"location":"full-specs/#draw","title":"Draw","text":""},{"location":"full-specs/#event-propagation","title":"Event propagation","text":""},{"location":"full-specs/#scripts","title":"Scripts","text":"<p>Embedded scripts are</p>"},{"location":"full-specs/#single-user-scripts","title":"Single user scripts","text":""},{"location":"full-specs/#module-scripts","title":"Module scripts","text":""},{"location":"full-specs/#mixins","title":"Mixins","text":"<pre><code>&lt;app&gt;\n    &lt;mixin name=\"...\" args.../&gt;\n    &lt;mixins src=\"\"/&gt;\n\n    &lt;item mixin=\"class1,class2,class3\" overrides.../&gt;\n&lt;/app&gt;\n</code></pre> <p>Mixins can be for:</p> <ul> <li><code>*</code> Everyone</li> <li><code>ns:*</code> Everyone in xml namespace ns</li> <li><code>+tag1,+tag2,...</code> a list of tags</li> <li><code>class1,class2</code> elements with that token in the <code>mixin</code> attribute</li> </ul>"},{"location":"full-specs/#topics","title":"Topics","text":"<ul> <li>Templating</li> <li>Data</li> <li>Scripting</li> <li>Virtual paths</li> <li>Settings &amp; user profiles</li> </ul>"},{"location":"full-specs/data/","title":"Data","text":"<p>Data elements are the main and most idiomatic mechanism in <code>vs</code> to include state in applications.</p>"},{"location":"full-specs/data/#general-structure","title":"General structure","text":""},{"location":"full-specs/data/#attributes","title":"Attributes","text":"<ul> <li>readonly as boolean. Defaults to <code>false</code>. If true, no mutation is allowed from within this application.</li> <li>volatile as boolean. Defaults to <code>true</code>. If true it must be expected that events outside the scope of this app can change data.</li> <li>src as string. The source path of data. It must be specified.</li> <li>schema as string. The source path to a schema file. Used as metadata for static checks when the associated datasource is used.</li> </ul>"},{"location":"full-specs/data/#subtypes","title":"Subtypes","text":""},{"location":"full-specs/data/#csv","title":"CSV","text":""},{"location":"full-specs/data/#additional-attributes","title":"Additional attributes","text":"<ul> <li>header as boolean. Defaults to <code>false</code>. If true the first row is used as schema information or skipped if <code>schema</code> is already provided.</li> <li>separator.field as string. Defaults to <code>\\t</code>. The character to split columns.</li> <li>separator.record as string. Defaults to <code>\\n</code>. The character to split records.</li> </ul>"},{"location":"full-specs/data/#fs","title":"FS","text":""},{"location":"full-specs/data/#json","title":"JSON","text":""},{"location":"full-specs/data/#sqlite","title":"SQLITE","text":""},{"location":"full-specs/data/#xml","title":"XML","text":""},{"location":"full-specs/paths/","title":"Paths","text":""},{"location":"full-specs/paths/#automatic-path-findings","title":"Automatic path findings","text":"<p>Order of search for component when the direct <code>fullname</code> is not found. <code>name</code> is <code>fullname</code> reduced of its last extension.</p> <p>First attempt is to look for the exact name:</p> <ul> <li><code>fullname</code></li> </ul> <p>If it fails, check for any the following in such order:</p> <ul> <li><code>name.vs</code></li> <li><code>name.xml</code></li> <li><code>name.wasm</code></li> <li><code>name.riscv</code></li> <li><code>name.[arch].so</code> | <code>name.[arch].dll</code> | <code>name.[arch].dylib</code></li> <li><code>name.c</code></li> <li><code>name.md</code></li> </ul> <p>If it fails and the folder <code>name</code> exists, check for these:</p> <ul> <li><code>name/main.vs</code></li> <li><code>name/main.xml</code></li> <li><code>name/main.wasm</code></li> <li><code>name.riscv</code></li> <li><code>name/main.[arch].so</code> | <code>name/main.[arch].dll</code> | <code>name/main.[arch].dylib</code></li> <li><code>name/main.c</code></li> <li><code>name/main.md</code></li> </ul>"},{"location":"full-specs/paths/#implicit-loading-pipelines","title":"Implicit loading pipelines","text":"<ul> <li><code>.vs</code> &amp; <code>.xml</code> files are either loaded directly, or after being compiled from <code>vs.templ</code>.</li> <li><code>.wasm</code> files are handled as wasm components by wamr</li> <li><code>.riscv</code> are handled via the riscv vm</li> <li><code>[arch].so</code> &amp; al. are loaded as native components</li> <li><code>.c</code> are compiled by tcc into native components and loaded as such</li> <li><code>.md</code> is loaded directly as a component</li> </ul>"},{"location":"full-specs/scripting/","title":"Scripting","text":"<p>Embedded scripts are small programs which can be integrated directly in the XML structure of a <code>vs</code> component or application. Several languages and related backends are available:</p> <ul> <li>C running on TinyCC</li> <li>JS running on QuickJS</li> <li>Lua running on Lua/LuaJIT</li> <li>Any language with a backend which can run on libriscv</li> </ul> <p>WASM support was originally planned, but the lack of good tooling put it in the freezer for now.</p> <p>When working with embedded scripts there are few things to consider:</p> <ul> <li>Different runtimes can be more or less safe. Please refer to the safety policies for more context on this.</li> <li>The runtime exposed by this language might not be what you would expect. For example, C has no libc, only a subset of it at best, and functions which are specific to <code>vs</code>.</li> <li>While there is an attempt to provide feature parity between the different backends, this is not always possible. Differences (for now) are tracked here</li> <li>There is no restriction on what you can do within embedded scripts, but it is clear there should be no complex computation. Filesystem and network access might be available with some heavy restrictions and depending on policies. Most applications should not assume they can.</li> </ul>"},{"location":"full-specs/scripting/#the-script-tag","title":"The <code>script</code> tag","text":""},{"location":"full-specs/scripting/#modules-vs-single-user-scripts","title":"Modules vs Single User Scripts","text":""},{"location":"full-specs/scripting/#compact-scripts","title":"Compact scripts","text":""},{"location":"full-specs/scripting/#exported-symbols","title":"Exported symbols","text":""},{"location":"full-specs/scripting/#imported-symbols","title":"Imported symbols","text":""},{"location":"full-specs/settings/","title":"Settings","text":""},{"location":"full-specs/settings/#order-of-evaluation-for-policies","title":"Order of evaluation for policies","text":"<p>Directives on policies are applied base on the following priority (highest to lowest)</p> <ul> <li>built-in compiled profile (vs can be built with embedded policies)</li> <li>command line environment variables</li> <li><code>runtime/base-policy</code></li> <li><code>domain</code> if not a recognized app. Else <code>app</code> and its domain policies are ignored.</li> <li>Any locally defined policy within the app or components.</li> </ul>"},{"location":"full-specs/settings/#structure-of-a-settings-profile","title":"Structure of a settings profile","text":"<p>This is the tree structure of any settings XML file:</p> <ul> <li><code>vs-profile</code></li> <li><code>locale</code><ul> <li><code>user</code>: dictionary of user data, mostly used for forms auto fill-in.</li> <li><code>languages</code>: dictionary of supported languages. They are ordered by preference (lower number higher preference) and when ambiguous by order in the XML file.</li> <li><code>theme</code>: base user theme. It supports some attributes:<ul> <li><code>src</code> the location of a theme xml file to be used as parent.</li> <li><code>scheme</code> pick up a color scheme if internally defined (default allowed).</li> <li><code>mode</code> determines if using dark, light, high contrast etc. or if this choice should be left to the OS if <code>inherit</code> (default).</li> </ul> </li> <li><code>initial-scene</code>: path for the scene to show up when starting <code>vs</code></li> </ul> </li> <li><code>runtime</code><ul> <li><code>logging</code></li> <li><code>parsing</code></li> <li><code>base-policy</code> same structure as one entry in the policies, but this is applied as a global override to fully shut of features of <code>vs</code>.</li> </ul> </li> <li><code>policies</code><ul> <li><code>template</code> reusable entries, used to avoid copy and paste. Their content is expanded in <code>domain</code> and <code>app</code> extending from them.<ul> <li><code>name</code> unique name in the config file</li> <li><code>extends</code> comma separated list of sources to copy from.</li> </ul> </li> <li><code>domain</code><ul> <li><code>extends</code> comma separated list of sources to copy from.</li> </ul> </li> <li><code>app</code><ul> <li><code>extends</code> comma separated list of sources to copy from.</li> </ul> </li> </ul> </li> </ul>"},{"location":"full-specs/settings/#user-dictionary","title":"User dictionary","text":"<p>Entries in the user dictionary are arbitrary and publicly exposed as <code>user://</code> virtual paths. Apps cannot mutate them, this is only possible via settings. They are not a replacement for secrets!</p> <p>User data should only include things like user\u2019s nickname, public email, daytime zone, etc.</p>"},{"location":"full-specs/settings/#language-codes","title":"Language codes","text":"<p>Language codes are expressed as a pair <code>language</code>, <code>country</code>. Country is optional, which means any satisfying the language itself can be picked.</p>"},{"location":"full-specs/settings/#policy-structure","title":"Policy structure","text":""},{"location":"full-specs/settings/#flag-entries","title":"Flag entries","text":"<p>Most entries are flags supporting one of three values:</p> <ul> <li><code>yes</code>: use the upstream value from the parent, but if that is <code>no</code> report a warning/error.</li> <li><code>no</code>: revoke this permission.</li> <li><code>inherit</code> (default): use the upstream value from the parent.</li> </ul>"},{"location":"full-specs/templating/","title":"Templating","text":"<p>Templating is based on a vs.templ, a custom XML preprocessor loosely inspired by xslt. Its documentation can be found on its separate repository here. Within the context of <code>vs.fltk</code>, using templates involves two files:</p> <ul> <li>the static dataset which contains any structured needed by the final generation. For vs, its root must be <code>&lt;vs:static-data&gt;</code> and provide a <code>template</code> attribute pointing to the actual component template. The suggested extension is <code>.vs</code>, the same as normal components.</li> <li>the template itself, containing a <code>vs</code> tree structure and templating commands as well.   Its conventional extension is <code>.tvs</code>. These files should never be used as components on their own.</li> </ul> <p>When importing or using a component which requires processing, it is compiled and replaces the original dataset before the building process in the UI continues. You can find an example for a dataset &amp; its associated template.</p>"},{"location":"releases/v0.1.1-alpha/","title":"V0.1.1 alpha","text":""},{"location":"releases/v0.1.1-alpha/#v011-alpha","title":"v0.1.1-alpha","text":"<p>This first alpha release is not meant to be usable in real-world scenarios, and documentation will not be there yet for the most part. The main objective is to implement &amp; test most of the pipelines needed to:</p> <ul> <li>build <code>vs</code></li> <li>install it</li> <li>the generation of its flatpak image</li> </ul> <p>Still, <code>vs</code> is somewhat usable as a technical preview. For now, the building pipeline is not well documented, and it can be hard to replicate. Also, installing it on most distributions might cause issues with your past or future dependencies. You should be able to try it out via flatpak and the docker image provided by @andy5995. I am seeking feedback, so you are very welcome to test it along!</p> <p>For reference, you can check what is the intended scope of this project in terms of future developments and expected features. The milestone page also contains some related information.</p>"},{"location":"releases/v0.1.1-alpha/#whats-new","title":"What\u2019s new?","text":"<p>This is what has been implemented so far (and some missing feature for context):</p> <ul> <li>Basic CLI features for the command <code>vs</code>. These are not expected to change for quite a while.</li> <li>Code generation infrastructure for fltk components and derived schemas.</li> <li>Infrastructure to handle the user sqlite database with proper schemas and migration.</li> <li>A small set of components from fltk being exposed, like buttons, labels, windows etc.</li> <li>Several features of <code>vs</code> exposed as XML elements:</li> <li> <code>mixin</code></li> <li> embedded <code>script</code></li> <li> embedded <code>policies</code></li> <li> <code>namespace</code></li> <li> <code>import</code></li> <li> <code>use</code></li> <li> caching directives</li> <li> dynamic data</li> <li>Basic XML builder (no full caching, no multithreading)</li> <li>Templating engine for vs components. Integration is complete, but there is ongoing work tracked in a separate repo</li> <li>Embedded scripts:</li> <li>Support for <code>c</code> via tcc<ul> <li> Modules</li> <li> Callbacks</li> <li> Props</li> <li> Computed</li> <li> Dispatcher</li> <li> Setters/getters</li> <li> FFI to external libraries</li> <li> Debug interface</li> </ul> </li> <li>Support for <code>js</code> via quickjs<ul> <li> Modules</li> <li> Callbacks</li> <li> Props</li> <li> Computed</li> <li> Dispatcher</li> <li> Setters/getters</li> <li> FFI to external libraries</li> <li> Debug interface</li> </ul> </li> <li>Very early and limited c bindings for <code>vs.fltk</code>, mostly for testing purposes.</li> <li>A simple in-memory caching for files, compiled scripts &amp; parsed XML trees.   The more complex sqlite cache is yet to be implemented in code.</li> <li>An early (partial) implementation of policies and coarse-grained flags as a temporary stopgap.</li> <li>Install process mostly implemented in meson (the pre-build codegen step will stay in typescript).</li> <li>Functional flatpak build</li> <li>A docker image for development</li> <li>Initial CI integrations</li> </ul>"},{"location":"users/","title":"Index","text":"<p>Important</p> <p>This project is very much in its infancy. At the moment final users are not expected to install or run <code>vs</code>, so this document has not been filled in yet.</p> <p>Thank you for choosing <code>vs</code>, the lightweight UI runtime. This page covers the basics to get started with it as a user!</p>"},{"location":"users/#downloading-binaries","title":"Downloading binaries","text":"<p>You can download the latest binaries for the supported platforms from the releases page. If you wish to compile <code>vs</code> on your own, please check the developer docs.</p>"},{"location":"users/#installation","title":"Installation","text":""},{"location":"users/#running-a-vs-application","title":"Running a <code>vs</code> application","text":"<p>Once installed, <code>vs</code> will be available in your system either as a desktop launcher entry or via command line. If installed as a native application you can just use it typing <code>vs</code> in the terminal. If you installed it as a flatpak, <code>flatpak run com.karurochari.vs</code>.</p> <p>Running <code>vs</code> via command lines allows you to specify custom environment variables or to run some of its subcommands without navigating the embedded UI. The rest of the document will cover this.</p>"},{"location":"users/#embedded-tools","title":"Embedded tools","text":""},{"location":"users/#running-an-application","title":"Running an application","text":""},{"location":"users/#builtin-editor","title":"Builtin editor","text":""},{"location":"users/#builtin-workspace","title":"Builtin workspace","text":""},{"location":"users/#environment-variables","title":"Environment variables","text":"<p>In general they are not really meant to be useful for most users, but they are all reported in here.</p>"},{"location":"users/#user-profiles","title":"User profiles","text":""},{"location":"users/env-vars/","title":"Env vars","text":"<p>WIP</p>"},{"location":"users/env-vars/#debugging","title":"Debugging","text":"Name Type Description VS_ACTIONS_FILE fs-path If specified, an xml file including a list of actions to operate on the UI (for automatic testing) VS_DEBUG_FILE fs-path If specified, file where debug records are appended. Else, there is no side effect for those operations VS_LOG_FILE fs-path If specified, file where log records are appended. Else, std out VS_LOG_LEVEL <code>silent,basic,verbose,debug</code> Globally set the baseline log level, so that some messages can be skipped if not relevant."},{"location":"users/env-vars/#safety-policies","title":"Safety policies","text":"<p>Policy level:</p> <ul> <li>all</li> <li>none</li> <li>trusted</li> <li>normal</li> <li>safe</li> </ul> Name Type Description VS_GLOBAL_POLICY VS_NETWORKING_POLICY VS_SCRIPTS_POLICY VS_NATIVE_COMPONENTS_POLICY"},{"location":"users/env-vars/#runtime","title":"Runtime","text":"Name Type Description VS_DB fs-path A path to a custom database for session/persistent caching &amp; storage. If not specified the default one will be used VS_HEADLESS boolean If true no UI is rendered, useful for testing purposes. VS_PARSER_MODE <code>balanced,low-mem</code> It changes the type of parse used, mostly for compatibility with lower spec hardware. <code>balanced</code> by default VS_NO_CACHE boolean Disable any kind of caching &amp; persistence. Some sort of \u201cguest\u201d mode or for diagnostics. VS_NO_THEME boolean Disable any kind of custom theming VS_PREFIX_DIR fs-path Define a base root not in <code>/</code>. Used to run vs when installed as portable on a system. Also good for testing."},{"location":"users/safety-policies/","title":"Safety policies","text":""},{"location":"users/safety-policies/#risk-assessment-guidelines","title":"Risk assessment guidelines","text":"<p><code>vs</code> should always be considered as an unsafe runtime. While there is a fair amount of effort in sandboxing and gatekeeping the underlying system to any embedded script, these are mitigations for user errors at best and not safety features. The actual degree of safety widely varies depending on the type of embedded script and component being used. For this reason it is possible to configure what is allowed and where as part of a risk mitigation strategy in the user configuration.</p> Component type Risk level Notes Basic XML Lowest As long as pugixml and vs don\u2019t have nasty bugs it is fine Preprocessed XML Lowest Same as before (aside from vulnerabilities in the preprocessor) XML + Native Highest It is very easy to break the thin sandbox and run arbitrary code XML + QuickJS Medium QuickJS is sandboxed, but there could be vulnerabilities in the parser leading to exploits XML + WASM Low As long as you trust WAMR to be sound it will be fine XML + Lua Medium Like QuickJS, it is possible for Lua to have vulnerabilities in its parser or runtime XML + LuaJIT High Not as bad as pure native code,yet the sandbox of LuaJIT is not designed for that Native components Highest Arbitrary code doing arbitrary things, unless externally constrained WASI components Low As long as WAMR holds and our interface has no hole, they are much safer (and portable) alternatives to native components <p>High-risk combinations should only be ever used when you fully trust your source of code and the chain to obtain it. It is really unadvisable to keep them enabled for apps/components fetched via <code>http</code>, even if the source is trusted as you might be victim of man in the middle attacks.</p>"},{"location":"users/safety-policies/#definition-of-policies","title":"Definition of policies","text":"<p>Policies are rules which are enforced by the engine to determine which operations and which feature are allowed based on contextual information. They can be used, for example, to allow local applications to run scripts usually considered as less safe, and disallow the same when coming from all internet sources but few selected addresses.</p> <p>During runtime, there are three main source determining policies:</p> <ul> <li>Via coarse-grained environment variables made available. Those are used as root for derivation for every policy coming after. For example setting <code>VS_NETWORKING_POLICY=none</code> as a variable will ensure networking will always be disabled no matter what.</li> <li>Via user profiles. As part of each user\u2019s configuration, it is possible to store rules that for more or less specific path patterns and app uuid will apply specialized policies.</li> <li>Via meta information in the XML of components and applications. Those are only hints, and it is up to the engine to decide whether they should be accepted or not, at times with an explicit request to the user.</li> </ul> <p>It is possible that a single component or app can have multiple viable rule sets matching their path, base id or uuid. Only one set should be applied at any time, and it is the one with the highest match. For example:</p> <ul> <li><code>https://**</code> will match any request performed via https.</li> <li><code>https://app.example.org/**</code> will match any request associated to a specific domain.</li> <li><code>#app-id:xxxxxxx</code> will match a specific app id (possibly cloned) given by a vendor.</li> <li><code>unique#app-id:xxxxxxx</code> will match the unique id determined by the app id, its location AND the secret user key.   The more specific set which applies will be the one selected.   Rule sets can be specified as a combination of requirements like URL patterns AND unique identifier.</li> </ul>"}]}